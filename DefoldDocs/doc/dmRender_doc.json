{
  "elements": [
    {
      "type": "TYPEDEF",
      "name": "HRenderContext",
      "brief": "The render context",
      "description": "The render context",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "HMaterial",
      "brief": "Material instance handle",
      "description": "Material instance handle",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "HFontMap",
      "brief": "Font map handle",
      "description": "Font map handle",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "HConstant",
      "brief": "Shader constant handle",
      "description": "Shader constant handle",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "HNamedConstantBuffer",
      "brief": "Shader constant buffer handle. Holds name and valu...",
      "description": "Shader constant buffer handle. Holds name and values for a constant.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Result",
      "brief": "",
      "description": "",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "RESULT_OK",
          "doc": "",
          "type": ""
        },
        {
          "name": "RESULT_INVALID_CONTEXT",
          "doc": "",
          "type": ""
        },
        {
          "name": "RESULT_OUT_OF_RESOURCES",
          "doc": "",
          "type": ""
        },
        {
          "name": "RESULT_BUFFER_IS_FULL",
          "doc": "",
          "type": ""
        },
        {
          "name": "RESULT_INVALID_PARAMETER",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmRender::GetMaterialVertexSpace",
      "brief": "Get the vertex space (local or world)",
      "description": "Get the vertex space (local or world)",
      "returnvalues": [
        {
          "name": "vertex_space",
          "doc": "the vertex space",
          "types": [
            "dmRenderDDF::MaterialDesc::VertexSpace"
          ]
        }
      ],
      "parameters": [
        {
          "name": "material",
          "doc": "the material",
          "types": [
            "dmRender::HMaterial"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "StencilTestParams",
      "brief": "Struct holding stencil operation setup",
      "description": "Struct holding stencil operation setup",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_Func",
          "doc": "the compare function",
          "type": "dmGraphics::CompareFunc"
        },
        {
          "name": "m_OpSFail",
          "doc": "the stencil fail operation",
          "type": "dmGraphics::StencilOp"
        },
        {
          "name": "m_OpDPFail",
          "doc": "the depth pass fail operation",
          "type": "dmGraphics::StencilOp"
        },
        {
          "name": "m_OpDPPass",
          "doc": "the depth pass pass operation",
          "type": "dmGraphics::StencilOp"
        },
        {
          "name": "m_Ref",
          "doc": "",
          "type": "uint8_t"
        },
        {
          "name": "m_RefMask",
          "doc": "",
          "type": "uint8_t"
        },
        {
          "name": "m_BufferMask",
          "doc": "",
          "type": "uint8_t"
        },
        {
          "name": "m_ColorBufferMask",
          "doc": "",
          "type": "uint8_t:4"
        },
        {
          "name": "m_ClearBuffer",
          "doc": "",
          "type": "uint8_t:1"
        }
      ],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmRender::RenderObject::MAX_TEXTURE_COUNT",
      "brief": "The maximum number of textures the render object c...",
      "description": "The maximum number of textures the render object can hold (currently 8)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "RenderObject",
      "brief": "Render objects represent an actual draw call",
      "description": "Render objects represent an actual draw call",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_Constants",
          "doc": "] the shader constants",
          "type": "dmRender::HConstant["
        },
        {
          "name": "m_WorldTransform",
          "doc": "the world transform (usually identity for batched objects)",
          "type": "dmVMath::Matrix4"
        },
        {
          "name": "m_TextureTransform",
          "doc": "the texture transform",
          "type": "dmVMath::Matrix4"
        },
        {
          "name": "m_VertexBuffer",
          "doc": "the vertex buffer",
          "type": "dmGraphics::HVertexBuffer"
        },
        {
          "name": "m_VertexDeclaration",
          "doc": "the vertex declaration",
          "type": "dmGraphics::HVertexDeclaration"
        },
        {
          "name": "m_IndexBuffer",
          "doc": "the index buffer",
          "type": "dmGraphics::HIndexBuffer"
        },
        {
          "name": "m_Material",
          "doc": "the material",
          "type": "dmRender::HMaterial"
        },
        {
          "name": "m_Textures",
          "doc": "] the textures",
          "type": "dmGraphics::HTexture["
        },
        {
          "name": "m_PrimitiveType",
          "doc": "the primitive type",
          "type": "dmGraphics::PrimitiveType"
        },
        {
          "name": "m_IndexType",
          "doc": "the index type (16/32 bit)",
          "type": "dmGraphics::Type"
        },
        {
          "name": "m_SourceBlendFactor",
          "doc": "the source blend factor",
          "type": "dmGraphics::BlendFactor"
        },
        {
          "name": "m_DestinationBlendFactor",
          "doc": "the destination blend factor",
          "type": "dmGraphics::BlendFactor"
        },
        {
          "name": "m_StencilTestParams",
          "doc": "the stencil test params",
          "type": "dmRender::StencilTestParams"
        },
        {
          "name": "m_VertexStart",
          "doc": "the vertex start",
          "type": "uint32_t"
        },
        {
          "name": "m_VertexCount",
          "doc": "the vertex count",
          "type": "uint32_t"
        },
        {
          "name": "m_SetBlendFactors",
          "doc": "use the blend factors",
          "type": "uint8_t:1"
        },
        {
          "name": "m_SetStencilTest",
          "doc": "use the stencil test",
          "type": "uint8_t:1"
        }
      ],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RenderListEntry",
      "brief": "Represents a renderable object (e.g. a single spri...",
      "description": "Represents a renderable object (e.g. a single sprite)\nThe renderer will (each frame) collect all entries with the current material tag, then batch these objects together.\nBatching is done based on the batch key and Z value (or order for GUI nodes)\nThe caller will also register a callback function where the batched entries will be returned.\nEach callback then represents a draw call, and will register a RenderObject",
      "returnvalues": [],
      "parameters": [
        {
          "name": "m_WorldPosition",
          "doc": "the world position of the object",
          "types": [
            "dmVMath::Point3"
          ]
        },
        {
          "name": "m_Order",
          "doc": "the order to sort on (used if m_MajorOrder != RENDER_ORDER_WORLD)",
          "types": [
            "uint32_t"
          ]
        },
        {
          "name": "m_BatchKey",
          "doc": "the batch key to sort on (note: only 48 bits are currently used by renderer)",
          "types": [
            "uint32_t"
          ]
        },
        {
          "name": "m_TagListKey",
          "doc": "the key to the list of material tags",
          "types": [
            "uint32_t"
          ]
        },
        {
          "name": "m_UserData",
          "doc": "user data (available in the render dispatch callback)",
          "types": [
            "uint64_t"
          ]
        },
        {
          "name": "m_MinorOrder",
          "doc": "used to sort within a batch",
          "types": [
            "uint32_t:4"
          ]
        },
        {
          "name": "m_MajorOrder",
          "doc": "If RENDER_ORDER_WORLD, then sorting is done based on the world position.\nOtherwise the sorting uses the m_Order value directly.",
          "types": [
            "uint32_t:2"
          ]
        },
        {
          "name": "m_Dispatch",
          "doc": "The dispatch function callback (dmRender::HRenderListDispatch)",
          "types": [
            "uint32_t:8"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "RenderListOperation",
      "brief": "Render batch callback states",
      "description": "Render batch callback states",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "RENDER_LIST_OPERATION_BEGIN",
          "doc": "",
          "type": ""
        },
        {
          "name": "RENDER_LIST_OPERATION_BATCH",
          "doc": "",
          "type": ""
        },
        {
          "name": "RENDER_LIST_OPERATION_END",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "RenderOrder",
      "brief": "Render order",
      "description": "Render order",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "RENDER_ORDER_WORLD",
          "doc": "<div class=\"codehilite\"><pre><span></span><code>      Used by game objects\n</code></pre></div>",
          "type": ""
        },
        {
          "name": "RENDER_ORDER_AFTER_WORLD",
          "doc": "<div class=\"codehilite\"><pre><span></span><code>Used by gui\n</code></pre></div>",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Visibility",
      "brief": "Visibility status",
      "description": "Visibility status",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "VISIBILITY_NONE",
          "doc": "",
          "type": ""
        },
        {
          "name": "VISIBILITY_FULL",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "RenderListVisibilityParams",
      "brief": "Visibility dispatch function callback.",
      "description": "Visibility dispatch function callback.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_UserData",
          "doc": "the callback user data (registered with RenderListMakeDispatch())",
          "type": "void*"
        },
        {
          "name": "m_Entries",
          "doc": "the render entry array",
          "type": "dmRender::RenderListEntry"
        },
        {
          "name": "m_NumEntries",
          "doc": "the number of render entries in the array",
          "type": "uint32_t"
        }
      ],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "RenderListDispatchFn",
      "brief": "Render dispatch function callback.",
      "description": "Render dispatch function callback.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "params",
          "doc": "the params",
          "types": [
            "dmRender::RenderListDispatchParams"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "RenderListDispatchParams",
      "brief": "Render dispatch function callback.",
      "description": "Render dispatch function callback.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_Context",
          "doc": "the context",
          "type": "dmRender::HRenderContext"
        },
        {
          "name": "m_UserData",
          "doc": "the callback user data (registered with RenderListMakeDispatch())",
          "type": "void*"
        },
        {
          "name": "m_Operation",
          "doc": "the operation",
          "type": "dmRender::RenderListOperation"
        },
        {
          "name": "m_Buf",
          "doc": "the render entry array",
          "type": "dmRender::RenderListEntry"
        },
        {
          "name": "m_Begin",
          "doc": "the start of the render batch. contains index into the m_Buf array",
          "type": "uint32_t*"
        },
        {
          "name": "m_End",
          "doc": "the end of the render batch. Loop while \"m_Begin != m_End\"",
          "type": "uint32_t*"
        }
      ],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "HRenderListDispatch",
      "brief": "Render dispatch function handle.",
      "description": "Render dispatch function handle.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "RenderListDispatchFn",
      "brief": "Render dispatch function callback.",
      "description": "Render dispatch function callback.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "params",
          "doc": "the params",
          "types": [
            "dmRender::RenderListDispatchParams"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RenderListMakeDispatch",
      "brief": "Register a render dispatch function",
      "description": "Register a render dispatch function",
      "returnvalues": [
        {
          "name": "dispatch",
          "doc": "the render dispatch function handle",
          "types": [
            "dmRender::HRenderListDispatch"
          ]
        }
      ],
      "parameters": [
        {
          "name": "context",
          "doc": "the context",
          "types": [
            "dmRender::HRenderContext"
          ]
        },
        {
          "name": "dispatch_fn",
          "doc": "the render batch callback function",
          "types": [
            "dmRender::RenderListDispatchFn"
          ]
        },
        {
          "name": "visibility_fn",
          "doc": "the render list visibility callback function. May be 0",
          "types": [
            "dmRender::RenderListVisibilityFn"
          ]
        },
        {
          "name": "user_data",
          "doc": "userdata to the callback",
          "types": [
            "void*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RenderListAlloc",
      "brief": "Allocates an array of render entries",
      "description": "Allocates an array of render entries",
      "returnvalues": [
        {
          "name": "array",
          "doc": "the render list entry array",
          "types": [
            "dmRender::RenderListEntry*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "context",
          "doc": "the context",
          "types": [
            "dmRender::HRenderContext"
          ]
        },
        {
          "name": "entries",
          "doc": "the number of entries to allocate",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Do not store a pointer into this array, as they're reused next frame"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "RenderListSubmit",
      "brief": "Adds a render object to the current render frame",
      "description": "Adds a render object to the current render frame",
      "returnvalues": [],
      "parameters": [
        {
          "name": "context",
          "doc": "the context",
          "types": [
            "dmRender::HRenderContext"
          ]
        },
        {
          "name": "begin",
          "doc": "the start of the array",
          "types": [
            "dmRender::RenderListEntry*"
          ]
        },
        {
          "name": "end",
          "doc": "the end of the array (i.e. \"while begin!=end: *begin ...\"\")",
          "types": [
            "dmRender::RenderListEntry*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "AddToRender",
      "brief": "Adds a render object to the current render frame",
      "description": "Adds a render object to the current render frame",
      "returnvalues": [
        {
          "name": "result",
          "doc": "the result",
          "types": [
            "dmRender::Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "context",
          "doc": "the context",
          "types": [
            "dmRender::HRenderContext"
          ]
        },
        {
          "name": "ro",
          "doc": "the render object",
          "types": [
            "dmRender::RenderObject*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetMaterialTagListKey",
      "brief": "Gets the key to the material tag list",
      "description": "Gets the key to the material tag list",
      "returnvalues": [
        {
          "name": "listkey",
          "doc": "the list key",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "material",
          "doc": "the material",
          "types": [
            "dmGraphics::HMaterial"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "NewConstant",
      "brief": "Creates a shader program constant",
      "description": "Creates a shader program constant",
      "returnvalues": [
        {
          "name": "constant",
          "doc": "the constant",
          "types": [
            "dmRender::HConstant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "name_hash",
          "doc": "the name of the material constant",
          "types": [
            "dmhash_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "DeleteConstant",
      "brief": "Deletes a shader program constant",
      "description": "Deletes a shader program constant",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetConstantValues",
      "brief": "Gets the shader program constant values",
      "description": "Gets the shader program constant values",
      "returnvalues": [
        {
          "name": "values",
          "doc": "the uniform values",
          "types": [
            "dmVMath::Vector4*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        },
        {
          "name": "num_values",
          "doc": "(out) the array num_values",
          "types": [
            "uint32_t*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetConstantValues",
      "brief": "Sets the shader program constant values",
      "description": "Sets the shader program constant values",
      "returnvalues": [
        {
          "name": "result",
          "doc": "the result",
          "types": [
            "dmRender::Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        },
        {
          "name": "values",
          "doc": "the array values",
          "types": [
            "dmVMath::Vector4*"
          ]
        },
        {
          "name": "num_values",
          "doc": "the array size (number of Vector4's)",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetConstantName",
      "brief": "Gets the shader program constant name",
      "description": "Gets the shader program constant name",
      "returnvalues": [
        {
          "name": "name",
          "doc": "the hash name",
          "types": [
            "dmhash_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetConstantName",
      "brief": "Gets the shader program constant name",
      "description": "Gets the shader program constant name",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        },
        {
          "name": "name",
          "doc": "the hash name",
          "types": [
            "dmhash_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetConstantLocation",
      "brief": "Gets the shader program constant location",
      "description": "Gets the shader program constant location",
      "returnvalues": [
        {
          "name": "location",
          "doc": "the location",
          "types": [
            "int32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetConstantLocation",
      "brief": "Sets the shader program constant location",
      "description": "Sets the shader program constant location",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        },
        {
          "name": "location",
          "doc": "the location",
          "types": [
            "int32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetConstantType",
      "brief": "Gets the type of the constant",
      "description": "Gets the type of the constant",
      "returnvalues": [
        {
          "name": "type",
          "doc": "the type of the constant",
          "types": [
            "dmRenderDDF::MaterialDesc::ConstantType"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetConstantType",
      "brief": "Sets the type of the constant",
      "description": "Sets the type of the constant",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constant",
          "doc": "The shader constant",
          "types": [
            "dmRender::HConstant"
          ]
        },
        {
          "name": "type",
          "doc": "the type of the constant",
          "types": [
            "dmRenderDDF::MaterialDesc::ConstantType"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "NewNamedConstantBuffer",
      "brief": "Allocates a named constant buffer",
      "description": "Allocates a named constant buffer",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "DeleteNamedConstantBuffer",
      "brief": "Deletes a named constant buffer",
      "description": "Deletes a named constant buffer",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ClearNamedConstantBuffer",
      "brief": "Clears a named constant buffer from any constants.",
      "description": "Clears a named constant buffer from any constants.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RemoveNamedConstant",
      "brief": "Removes a named constant from the buffer",
      "description": "Removes a named constant from the buffer",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the name of the constant",
          "types": [
            "dmhash_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetNamedConstant",
      "brief": "Sets one or more named constants to the buffer",
      "description": "Sets one or more named constants to the buffer",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "values",
          "doc": "the values",
          "types": [
            "dmVMath::Vector4*"
          ]
        },
        {
          "name": "num_values",
          "doc": "the number of values",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetNamedConstant",
      "brief": "Sets one or more named constants to the buffer wit...",
      "description": "Sets one or more named constants to the buffer with a specified data type.\nCurrently only dmRenderDDF::MaterialDesc::CONSTANT_TYPE_USER and dmRenderDDF::MaterialDesc::CONSTANT_TYPE_USER_MATRIX4\nare supported.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "values",
          "doc": "the values",
          "types": [
            "dmVMath::Vector4*"
          ]
        },
        {
          "name": "num_values",
          "doc": "the number of values",
          "types": [
            "uint32_t"
          ]
        },
        {
          "name": "constant_type",
          "doc": "The constant type",
          "types": [
            "dmRenderDDF::MaterialDesc::ConstantType"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetNamedConstants",
      "brief": "Sets a list of named constants to the buffer",
      "description": "Sets a list of named constants to the buffer",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmRender::HConstant*"
          ]
        },
        {
          "name": "num_constants",
          "doc": "the number of constants",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetNamedConstantAtIndex",
      "brief": "Sets a named constant in the buffer at a specific ...",
      "description": "Sets a named constant in the buffer at a specific index",
      "returnvalues": [
        {
          "name": "result",
          "doc": "the result",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "value",
          "doc": "the value",
          "types": [
            "dmVMath::Vector4"
          ]
        },
        {
          "name": "value_index",
          "doc": "the index of the value to set",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetNamedConstant",
      "brief": "Gets a named constant from the buffer",
      "description": "Gets a named constant from the buffer",
      "returnvalues": [
        {
          "name": "ok",
          "doc": "true if constant existed.",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "values",
          "doc": "(out) the values. May not be null.",
          "types": [
            "dmVMath::Vector4**"
          ]
        },
        {
          "name": "num_values",
          "doc": "(out) the number of values. May not be null.",
          "types": [
            "uint32_t*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "This give access to the internal memory of the constant"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "GetNamedConstant",
      "brief": "Gets a named constant from the buffer - with type ...",
      "description": "Gets a named constant from the buffer - with type information",
      "returnvalues": [
        {
          "name": "ok",
          "doc": "true if constant existed.",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "values",
          "doc": "(out) the values. May not be null.",
          "types": [
            "dmVMath::Vector4**"
          ]
        },
        {
          "name": "num_values",
          "doc": "(out) the number of values. May not be null.",
          "types": [
            "uint32_t*"
          ]
        },
        {
          "name": "constant_type",
          "doc": "(out) the constant type.",
          "types": [
            "dmRenderDDF::MaterialDesc::ConstantType*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "This give access to the internal memory of the constant"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "GetNamedConstantCount",
      "brief": "Gets number of constants in the buffer",
      "description": "Gets number of constants in the buffer",
      "returnvalues": [
        {
          "name": "ok",
          "doc": "true if constant existed.",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "IterateNamedConstants",
      "brief": "Iterates over the constants",
      "description": "Iterates over the constants",
      "returnvalues": [],
      "parameters": [
        {
          "name": "buffer",
          "doc": "the constants buffer",
          "types": [
            "dmRender::HNamedConstantBuffer"
          ]
        },
        {
          "name": "callback",
          "doc": "the callback function void (<em>callback)(dmhash_t name_hash, void</em> ctx)",
          "types": [
            "void (*callback)(dmhash_t name_hash, void* ctx)"
          ]
        },
        {
          "name": "ctx",
          "doc": "the callback context",
          "types": [
            "void*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmRender",
    "name": "Render",
    "brief": "Render API documentation",
    "description": "<span class=\"file\"><dmsdk/render/render.h></span>\nApi for render specific data",
    "path": "",
    "file": "",
    "notes": []
  }
}
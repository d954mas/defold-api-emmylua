{
  "elements": [
    {
      "type": "TYPEDEF",
      "name": "HContext",
      "brief": "The script context",
      "description": "The script context",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_LUA_STACK_CHECK",
      "brief": "helper macro to validate the Lua stack state before leaving a function.",
      "description": "Diff is the expected difference of the stack size.\nIf luaL_error, or another function that executes a long-jump, is part of the executed code,\nthe stack guard cannot be guaranteed to execute at the end of the function.\nIn that case you should manually check the stack using <code>lua_gettop</code>.\nIn the case of luaL_error, see <a href=\"#DM_LUA_ERROR\">DM_LUA_ERROR</a>.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "diff",
          "doc": "Number of expected items to be on the Lua stack once this struct goes out of scope",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_LUA_ERROR",
      "brief": "helper macro to validate the Lua stack state and throw a lua error.",
      "description": "This macro will verify that the Lua stack size hasn't been changed before\nthrowing a Lua error, which will long-jump out of the current function.\nThis macro can only be used together with <a href=\"#DM_LUA_STACK_CHECK\">DM_LUA_STACK_CHECK</a> and should\nbe prefered over manual checking of the stack.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "fmt",
          "doc": "Format string that contains error information.",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">ModuleFunc</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">some_error_check</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">DM_LUA_ERROR</span><span class=\"p\">(</span><span class=\"s\">&quot;some error message&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::Ref",
      "brief": "wrapper for luaL_ref.",
      "description": "Creates and returns a reference, in the table at index t, for the object at the\ntop of the stack (and pops the object).\nIt also tracks number of global references kept.",
      "returnvalues": [
        {
          "name": "reference",
          "doc": "the new reference",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "table",
          "doc": "table the lua table that stores the references. E.g LUA_REGISTRYINDEX",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::Unref",
      "brief": "wrapper for luaL_unref.",
      "description": "Releases reference ref from the table at index t (see luaL_ref).\nThe entry is removed from the table, so that the referred object can be collected.\nIt also decreases the number of global references kept",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "table",
          "doc": "table the lua table that stores the references. E.g LUA_REGISTRYINDEX",
          "types": [
            "int"
          ]
        },
        {
          "name": "reference",
          "doc": "the reference to the object",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::GetInstance",
      "brief": "Retrieve current script instance from the global t...",
      "description": "Retrieve current script instance from the global table and place it on the top of the stack, only valid when set.\n(see <a href=\"#dmScript::GetMainThread\">dmScript::GetMainThread</a>)",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::SetInstance",
      "brief": "Sets the current script instance\nSet the value on ...",
      "description": "Sets the current script instance\nSet the value on the top of the stack as the instance into the global table and pops it from the stack.\n(see <a href=\"#dmScript::GetMainThread\">dmScript::GetMainThread</a>)",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsInstanceValid",
      "brief": "Check if the script instance in the lua state is v...",
      "description": "Check if the script instance in the lua state is valid. The instance is assumed to have been previously set by <a href=\"#dmScript::SetInstance\">dmScript::SetInstance</a>.",
      "returnvalues": [
        {
          "name": "boolean",
          "doc": "Returns true if the instance is valid",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::GetMainThread",
      "brief": "Retrieve the main thread lua state from any lua st...",
      "description": "Retrieve the main thread lua state from any lua state (main thread or coroutine).",
      "returnvalues": [
        {
          "name": "lua_State",
          "doc": "the main thread lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "examples": "How to create a Lua callback\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">g_MyCallbackInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cbk</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">IsCallbackValid</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">GetCallbackLuaContext</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">SetupCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dmLogError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to setup callback&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;Hello from extension!&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">76</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">PCall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// instance + 2</span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">TeardownCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">Start</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">g_MyCallbackInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CreateCallback</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">Update</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">DestroyCallback</span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">g_MyCallbackInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::ToVector3",
      "brief": "get the value at index as a dmVMath::Vector3*",
      "description": "Get the value at index as a dmVMath::Vector3*",
      "returnvalues": [
        {
          "name": "v",
          "doc": "The pointer to the value, or 0 if not correct type",
          "types": [
            "dmVMath::Vector3*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsVector3",
      "brief": "Check if the value at #index is a dmVMath::Vector3...",
      "description": "Check if the value at #index is a dmVMath::Vector3*",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if value at #index is a dmVMath::Vector3*",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            ""
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PushVector3",
      "brief": "push a dmVMath::Vector3 onto the Lua stack",
      "description": "Push a dmVMath::Vector3 value onto the supplied lua state, will increase the stack by 1.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "v",
          "doc": "Vector3 value to push",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckVector3",
      "brief": "check if the value is a dmVMath::Vector3",
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Vector3.",
      "returnvalues": [
        {
          "name": "vector3",
          "doc": "The pointer to the value",
          "types": [
            "dmVMath::Vector3*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "throws a luaL_error if it's not the correct type"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::ToVector4",
      "brief": "get the value at index as a dmVMath::Vector4*",
      "description": "Get the value at index as a dmVMath::Vector4*",
      "returnvalues": [
        {
          "name": "v",
          "doc": "The pointer to the value, or 0 if not correct type",
          "types": [
            "dmVMath::Vector4*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsVector4",
      "brief": "Check if the value at #index is a dmVMath::Vector4...",
      "description": "Check if the value at #index is a dmVMath::Vector4*",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if value at #index is a dmVMath::Vector4*",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            ""
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PushVector4",
      "brief": "push a dmVMath::Vector4 on the stack",
      "description": "Push a dmVMath::Vector4 value onto the supplied lua state, will increase the stack by 1.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "v",
          "doc": "dmVMath::Vector4 value to push",
          "types": [
            "dmVMath::Vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckVector4",
      "brief": "check if the value is a dmVMath::Vector3",
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Vector3.",
      "returnvalues": [
        {
          "name": "vector4",
          "doc": "The pointer to the value",
          "types": [
            "dmVMath::Vector4*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "throws a luaL_error if it's not the correct type"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::ToQuat",
      "brief": "get the value at index as a dmVMath::Quat*",
      "description": "Get the value at index as a dmVMath::Quat*",
      "returnvalues": [
        {
          "name": "quat",
          "doc": "The pointer to the value, or 0 if not correct type",
          "types": [
            "dmVMath::Quat*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsQuat",
      "brief": "Check if the value at #index is a dmVMath::Quat*",
      "description": "Check if the value at #index is a dmVMath::Quat*",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if value at #index is a dmVMath::Quat*",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            ""
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PushQuat",
      "brief": "push a dmVMath::Quat onto the Lua stack",
      "description": "Push a quaternion value onto Lua stack. Will increase the stack by 1.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "quat",
          "doc": "dmVMath::Quat value to push",
          "types": [
            "dmVMath::Quat"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckQuat",
      "brief": "check if the value is a dmVMath::Vector3",
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Quat.",
      "returnvalues": [
        {
          "name": "quat",
          "doc": "The pointer to the value",
          "types": [
            "dmVMath::Quat*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "throws a luaL_error if it's not the correct type"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::ToMatrix4",
      "brief": "get the value at index as a dmVMath::Matrix4*",
      "description": "Get the value at index as a dmVMath::Matrix4*",
      "returnvalues": [
        {
          "name": "quat",
          "doc": "The pointer to the value, or 0 if not correct type",
          "types": [
            "dmVMath::Matrix4*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsMatrix4",
      "brief": "Check if the value at #index is a dmVMath::Matrix4...",
      "description": "Check if the value at #index is a dmVMath::Matrix4*",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if value at #index is a dmVMath::Matrix4*",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            ""
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PushMatrix4",
      "brief": "push a dmVMath::Matrix4 onto the Lua stack",
      "description": "Push a matrix4 value onto the Lua stack. Will increase the stack by 1.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "matrix",
          "doc": "dmVMath::Matrix4 value to push",
          "types": [
            "dmVMath::Matrix4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckMatrix4",
      "brief": "check if the value is a dmVMath::Matrix4",
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Matrix4.",
      "returnvalues": [
        {
          "name": "matrix",
          "doc": "The pointer to the value",
          "types": [
            "dmVMath::Matrix4*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "throws a luaL_error if it's not the correct type"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsHash",
      "brief": "Check if the value at #index is a hash",
      "description": "Check if the value at #index is a hash",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if the value at #index is a hash",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PushHash",
      "brief": "Push a hash value onto the supplied lua state, wil...",
      "description": "Push a hash value onto the supplied lua state, will increase the stack by 1.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "hash",
          "doc": "<span class=\"tyoe\"> dmhash_t</span> Hash value to push",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckHash",
      "brief": "get hash value",
      "description": "Check if the value in the supplied index on the lua stack is a hash.",
      "returnvalues": [
        {
          "name": "The",
          "doc": "hash value",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckHashOrString",
      "brief": "get hash from hash or string",
      "description": "Check if the value in the supplied index on the lua stack is a hash or string.\nIf it is a string, it gets hashed on the fly",
      "returnvalues": [
        {
          "name": "The",
          "doc": "hash value",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetStringFromHashOrString",
      "brief": "Gets as good as possible printable string from a h...",
      "description": "Gets as good as possible printable string from a hash or string",
      "returnvalues": [
        {
          "name": "string",
          "doc": "Returns buffer. If buffer is non null, it will always contain a null terminated string. \"<unknown>\" if the hash could not be looked up.",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        },
        {
          "name": "buffer",
          "doc": "buffer receiving the value",
          "types": [
            "char*"
          ]
        },
        {
          "name": "buffer_length",
          "doc": "the buffer length",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::JsonToLua",
      "brief": "convert a Json string to a Lua table",
      "description": "Convert a Json string to Lua table.",
      "returnvalues": [
        {
          "name": "int",
          "doc": "1 if it succeeds. Throws a Lua error if it fails",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "json",
          "doc": "json string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "json_len",
          "doc": "length of json string",
          "types": [
            "size_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Throws Lua error if it fails to parser the json"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::LuaToJson",
      "brief": "convert a Lua table to a Json string",
      "description": "Convert a Lua table to a Json string",
      "returnvalues": [
        {
          "name": "int",
          "doc": "&lt;0 if it fails. &gt;=0 if it succeeds.",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "json",
          "doc": "[out] Pointer to char*, which will receive a newly allocated string. Use free().",
          "types": [
            "char**"
          ]
        },
        {
          "name": "json_len",
          "doc": "length of json string",
          "types": [
            "size_t*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "dmScript::LuaCallbackInfo",
      "brief": "callback info struct",
      "description": "callback info struct that will hold the relevant info needed to make a callback into Lua",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CreateCallback",
      "brief": "Register a Lua callback.",
      "description": "Stores the current Lua state plus references to the script instance (self) and the callback.\nExpects SetInstance() to have been called prior to using this method.\nThe allocated data is created on the Lua stack and references are made against the\ninstances own context table.\nIf the callback is not explicitly deleted with DestroyCallback() the references and\ndata will stay around until the script instance is deleted.",
      "returnvalues": [
        {
          "name": "Lua",
          "doc": "callback struct if successful, 0 otherwise",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            ""
          ]
        },
        {
          "name": "index",
          "doc": "Lua stack index of the function",
          "types": [
            ""
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">SomeFunction</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// called from Lua</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cbk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CreateCallback</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">later</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cbk</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">GetCallbackLuaContext</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">SetupCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;hello&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">PCall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// self + # user arguments</span>\n\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">TeardownCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">DestroyCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// only do this if you&#39;re not using the callback again</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsCallbackValid",
      "brief": "Check if Lua callback is valid.",
      "description": "Check if Lua callback is valid.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "cbk",
          "doc": "Lua callback struct",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::DestroyCallback",
      "brief": "Deletes the Lua callback",
      "description": "Deletes the Lua callback",
      "returnvalues": [],
      "parameters": [
        {
          "name": "cbk",
          "doc": "Lua callback struct",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::GetCallbackLuaContext",
      "brief": "Gets the Lua context from a callback struct",
      "description": "Gets the Lua context from a callback struct",
      "returnvalues": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "cbk",
          "doc": "Lua callback struct",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::SetupCallback",
      "brief": "Setups up the Lua callback prior to a call to dmScript::PCall()",
      "description": "The Lua stack after a successful call:\n<div class=\"codehilite\"><pre><span></span><code>   [-4] old instance\n   [-3] context table\n   [-2] callback\n   [-1] self\n</code></pre></div>\n\nIn the event of an unsuccessful call, the Lua stack is unchanged",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if the setup was successful",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "cbk",
          "doc": "Lua callback struct",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::TeardownCallback",
      "brief": "Cleans up the stack after SetupCallback+PCall calls",
      "description": "Sets the previous instance\nExpects Lua stack:\n<div class=\"codehilite\"><pre><span></span><code>   [-2] old instance\n   [-1] context table\n</code></pre></div>\n\nBoth values are removed from the stack",
      "returnvalues": [],
      "parameters": [
        {
          "name": "cbk",
          "doc": "Lua callback struct",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PCall",
      "brief": "This function wraps lua_pcall with the addition of...",
      "description": "This function wraps lua_pcall with the addition of specifying an error handler which produces a backtrace.\nIn the case of an error, the error is logged and popped from the stack.",
      "returnvalues": [
        {
          "name": "error",
          "doc": "code from pcall",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            ""
          ]
        },
        {
          "name": "nargs",
          "doc": "number of arguments",
          "types": [
            ""
          ]
        },
        {
          "name": "nresult",
          "doc": "number of results",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RefInInstance",
      "brief": "Creates a reference to the value at top of stack, ...",
      "description": "Creates a reference to the value at top of stack, the ref is done in the\ncurrent instances context table.\nExpects SetInstance() to have been set with an value that has a meta table\nwith META_GET_INSTANCE_CONTEXT_TABLE_REF method.",
      "returnvalues": [
        {
          "name": "lua",
          "doc": "ref to value or LUA_NOREF\nLua stack on entry\n [-1] value\nLua stack on exit",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "UnrefInInstance",
      "brief": "Deletes the instance local lua reference\nExpects ...",
      "description": "Deletes the instance local lua reference\nExpects SetInstance() to have been set with an value that has a meta table\nwith META_GET_INSTANCE_CONTEXT_TABLE_REF method.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "ref",
          "doc": "ref to value or LUA_NOREF\nLua stack on entry\nLua stack on exit",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RefInInstance",
      "brief": "Resolves a url in string format into a dmMessage::...",
      "description": "Resolves a url in string format into a dmMessage::URL struct.\nSpecial handling for:\n- \".\" returns the default socket + path\n- \"#\" returns default socket + path + fragment",
      "returnvalues": [
        {
          "name": "result",
          "doc": "dmMessage::RESULT_OK if the conversion succeeded",
          "types": [
            "dmMessage::Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "Lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "url",
          "doc": "url",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "out_url",
          "doc": "where to store the result",
          "types": [
            "dmMessage::URL*"
          ]
        },
        {
          "name": "default_url",
          "doc": "default url",
          "types": [
            "dmMessage::URL*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "UrlToString",
      "brief": "Converts a URL into a readable string. Useful for ...",
      "description": "Converts a URL into a readable string. Useful for e.g. error messages",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "returns the passed in buffer",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "url",
          "doc": "url",
          "types": [
            "dmMessage::URL*"
          ]
        },
        {
          "name": "buffer",
          "doc": "the output buffer",
          "types": [
            "char*"
          ]
        },
        {
          "name": "buffer_size",
          "doc": "the output buffer size",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "CheckGOInstance",
      "brief": "Get current game object instance\nWorks in both gam...",
      "description": "Get current game object instance\nWorks in both gameobjects and gui scripts",
      "returnvalues": [
        {
          "name": "instance",
          "doc": "",
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "CheckGOInstance",
      "brief": "Get gameobject instance\nThe instance reference (u...",
      "description": "Get gameobject instance\nThe instance reference (url) at stack index \"index\" will be resolved to an instance.",
      "returnvalues": [
        {
          "name": "instance",
          "doc": "gameobject instance",
          "types": [
            "lua_State*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "lua-arg",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "How to get the position of a gameobject in a script extension\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">get_position</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">HInstance</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CheckGOInstance</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Point3</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">GetPosition</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The function only accepts instances in \"this\" collection. Otherwise a lua-error will be raised."
      ]
    },
    {
      "type": "ENUM",
      "name": "LuaBufferOwnership",
      "brief": "buffer ownership",
      "description": "Buffer ownership.\n - OWNER_C   - m_Buffer is owned by C side, should not be destroyed when GCed\n - OWNER_LUA - m_Buffer is owned by Lua side, will be destroyed when GCed\n - OWNER_RES - m_Buffer not used, has a reference to a buffer resource instead. m_BufferRes is owned by C side, will be released when GCed",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmScript::OWNER_C",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmScript::OWNER_LUA",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmScript::OWNER_RES",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "dmScript::LuaHBuffer",
      "brief": "Lua wrapper for a dmBuffer::HBuffer",
      "description": "Holds info about the buffer and who owns it.",
      "returnvalues": [],
      "parameters": [],
      "examples": "See examples for dmScript::PushBuffer()",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "Union",
          "doc": "of\n    - m_BufferRes <span class=\"type\">void*</span>                       A buffer resource\n    - m_Buffer    <span class=\"type\">dmBuffer::HBuffer</span>           A buffer",
          "type": ""
        },
        {
          "name": "m_Buffer",
          "doc": "The buffer (or resource)",
          "type": "dmBuffer::HBuffer"
        },
        {
          "name": "m_Owner",
          "doc": "What ownership the pointer has",
          "type": "dmScript::LuaBufferOwnership"
        }
      ],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::IsBuffer",
      "brief": "check if the value is a dmScript::LuaHBuffer",
      "description": "Check if the value is a dmScript::LuaHBuffer",
      "returnvalues": [
        {
          "name": "boolean",
          "doc": "True if value at index is a LuaHBuffer",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::PushBuffer",
      "brief": "push a LuaHBuffer onto the supplied lua state",
      "description": "Will increase the stack by 1.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "buffer",
          "doc": "buffer to push",
          "types": [
            "dmScript::LuaHBuffer"
          ]
        }
      ],
      "examples": "How to push a buffer and give Lua ownership of the buffer (GC)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span><span class=\"w\"> </span><span class=\"nf\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_LUA</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">luabuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\nHow to push a buffer and keep ownership in C++\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span><span class=\"w\"> </span><span class=\"nf\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_C</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">luabuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckBuffer",
      "brief": "retrieve a LuaHBuffer from the supplied lua state",
      "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "pointer to dmScript::LuaHBuffer",
          "types": [
            "LuaHBuffer*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The dmBuffer::IsBufferValid is already called on the returned buffer"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckBufferNoError",
      "brief": "retrieve a LuaHBuffer from the supplied lua state.",
      "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "pointer to dmScript::LuaHBuffer or 0 if not valid",
          "types": [
            "LuaHBuffer*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Returns 0 on error. Does not invoke lua_error.",
        "The dmBuffer::IsBufferValid is already called on the returned buffer"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckBufferUnpack",
      "brief": "retrieve a HBuffer from the supplied lua state",
      "description": "Retrieve a HBuffer from the supplied lua state\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and it's valid, returns the HBuffer.",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "buffer if valid, 0 otherwise",
          "types": [
            "dmBuffer::HBuffer"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The dmBuffer::IsBufferValid is already called on the returned buffer"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "dmScript::CheckBufferUnpackNoError",
      "brief": "retrieve a HBuffer from the supplied lua state",
      "description": "Retrieve a HBuffer from the supplied lua state\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and it's valid, returns the HBuffer.",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "buffer if valid, 0 otherwise",
          "types": [
            "dmBuffer::HBuffer"
          ]
        }
      ],
      "parameters": [
        {
          "name": "L",
          "doc": "lua state",
          "types": [
            "lua_State*"
          ]
        },
        {
          "name": "index",
          "doc": "Index of the value",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The dmBuffer::IsBufferValid is already called on the returned buffer"
      ]
    }
  ],
  "info": {
    "namespace": "dmScript",
    "name": "Script",
    "brief": "SDK Script API documentation",
    "description": "Built-in scripting functions.",
    "path": "engine/gamesys/src/dmsdk/gamesys/script.h",
    "file": "dmsdk/gamesys/script.h",
    "notes": [],
    "group": "DEFOLD SDK"
  }
}
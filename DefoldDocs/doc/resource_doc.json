{
  "elements": [
    {
      "type": "FUNCTION",
      "name": "resource.material",
      "brief": "reference to material resource",
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "a path hash to the binary version of the resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "[path]",
          "doc": "optional resource path string to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "Load a material and set it to a sprite:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;/material.material&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;material&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_material</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.font",
      "brief": "reference to font resource",
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "a path hash to the binary version of the resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "[path]",
          "doc": "optional resource path string to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "Load a font and set it to a label:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_font&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;/font.font&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;font&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_font</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nLoad a font and set it to a gui:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_font&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;/font.font&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fonts&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_font</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_font&quot;</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.texture",
      "brief": "reference to texture resource",
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "a path hash to the binary version of the resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "[path]",
          "doc": "optional resource path string to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "Load a texture and set it to a model:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_texture&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;/texture.png&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;texture0&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_texture</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.atlas",
      "brief": "reference to atlas resource",
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "a path hash to the binary version of the resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "[path]",
          "doc": "optional resource path string to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "Load an atlas and set it to a sprite:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_atlas&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/atlas.atlas&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;image&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_atlas</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nLoad an atlas and set it to a gui:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_atlas&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/atlas.atlas&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;textures&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_atlas</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_atlas&quot;</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.buffer",
      "brief": "reference to buffer resource",
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "a path hash to the binary version of the resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "[path]",
          "doc": "optional resource path string to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "Set a unique buffer it to a sprite:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_buffer&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">(</span><span class=\"s2\">&quot;/cube.buffer&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#mesh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;vertices&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_buffer</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.tile_source",
      "brief": "reference to tile source resource",
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "a path hash to the binary version of the resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "[path]",
          "doc": "optional resource path string to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "Load tile source and set it to a tile map:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_tile_source&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">tile_source</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tilesource.tilesource&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#tilemap&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tile_source&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_tile_source</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.set",
      "brief": "Set a resource",
      "description": "Sets the resource data for a specific resource",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "buffer",
          "doc": "The buffer of precreated data, suitable for the intended resource type",
          "types": [
            "buffer"
          ]
        }
      ],
      "examples": "Assuming the folder \"/res\" is added to the project custom resources:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- load a texture resource and set it on a sprite</span>\n<span class=\"kd\">local</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;/res/new.texturec&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;texture0&quot;</span><span class=\"p\">),</span> <span class=\"n\">buffer</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.load",
      "brief": "load a resource",
      "description": "Loads the resource data for a specific resource.",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "Returns the buffer stored on disc",
          "types": [
            "buffer"
          ]
        }
      ],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- read custom resource data into buffer</span>\n<span class=\"kd\">local</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;/resources/datafile&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\nIn order for the engine to include custom resources in the build process, you need\nto specify them in the \"game.project\" settings file:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">[project]</span><span class=\"w\"></span>\n<span class=\"na\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">My project</span><span class=\"w\"></span>\n<span class=\"na\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">0.1</span><span class=\"w\"></span>\n<span class=\"na\">custom_resources</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">resources/,assets/level_data.json</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.create_texture",
      "brief": "create a texture",
      "description": "Creates a new texture resource that can be used in the same way as any texture created during build time.\nThe path used for creating the texture must be unique, trying to create a resource at a path that is already\nregistered will trigger an error. If the intention is to instead modify an existing texture, use the <a href=\"/ref/resource#resource.set_texture\">resource.set_texture</a>\nfunction. Also note that the path to the new texture resource must have a '.texturec' extension,\nmeaning \"/path/my_texture\" is not a valid path but \"/path/my_texture.texturec\" is.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "The path to the resource.",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource.",
          "types": [
            "string"
          ]
        },
        {
          "name": "table",
          "doc": "A table containing info about how to create the texture. Supported entries:\n<dl>\n<dt><code>type</code></dt>\n<dd><span class=\"type\">number</span> The texture type. Supported values:</dd>\n</dl>\n<ul>\n<li><code>resource.TEXTURE_TYPE_2D</code></li>\n<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>\n</ul>\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">number</span> The width of the texture (in pixels)</dd>\n<dt><code>height</code></dt>\n<dd><span class=\"type\">number</span> The width of the texture (in pixels)</dd>\n<dt><code>format</code></dt>\n<dd><span class=\"type\">number</span> The texture format, note that some of these formats are platform specific. Supported values:</dd>\n</dl>\n<ul>\n<li><code>resource.TEXTURE_FORMAT_LUMINANCE</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_ETC1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_ETC2</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_ASTC_4x4</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_BC1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_BC3</code></li>\n<li><code>resource.TEXTURE_FORMAT_R_BC4</code></li>\n<li><code>resource.TEXTURE_FORMAT_RG_BC5</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_BC7</code></li>\n</ul>\n<dl>\n<dt><code>max_mipmaps</code></dt>\n<dd><span class=\"type\">number</span> optional max number of mipmaps. Defaults to zero, i.e no mipmap support</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to create an 128x128 RGBA texture resource and assign it to a model\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">tparams</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n       <span class=\"n\">width</span>          <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n       <span class=\"n\">height</span>         <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n       <span class=\"nb\">type</span>           <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_TYPE_2D</span><span class=\"p\">,</span>\n       <span class=\"n\">format</span>         <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_FORMAT_RGBA</span><span class=\"p\">,</span>\n   <span class=\"p\">}</span>\n   <span class=\"kd\">local</span> <span class=\"n\">my_texture_id</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">create_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;/my_custom_texture.texturec&quot;</span><span class=\"p\">,</span> <span class=\"n\">tparams</span><span class=\"p\">)</span>\n   <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;texture0&quot;</span><span class=\"p\">,</span> <span class=\"n\">my_texture_id</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.release",
      "brief": "release a resource",
      "description": "Release a resource.\n<span class=\"icon-attention\"></span> This is a potentially dangerous operation, releasing resources currently being used can cause unexpected behaviour.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource.",
          "types": [
            "hash",
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.set_texture",
      "brief": "set a texture",
      "description": "Sets the pixel data for a specific texture.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource",
          "types": [
            "hash",
            "string"
          ]
        },
        {
          "name": "table",
          "doc": "A table containing info about the texture. Supported entries:\n<dl>\n<dt><code>type</code></dt>\n<dd><span class=\"type\">number</span> The texture type. Supported values:</dd>\n</dl>\n<ul>\n<li><code>resource.TEXTURE_TYPE_2D</code></li>\n<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>\n</ul>\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">number</span> The width of the texture (in pixels)</dd>\n<dt><code>height</code></dt>\n<dd><span class=\"type\">number</span> The width of the texture (in pixels)</dd>\n<dt><code>format</code></dt>\n<dd><span class=\"type\">number</span> The texture format, note that some of these formats are platform specific. Supported values:</dd>\n</dl>\n<ul>\n<li><code>resource.TEXTURE_FORMAT_LUMINANCE</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_ETC1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_ETC2</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_ASTC_4x4</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB_BC1</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_BC3</code></li>\n<li><code>resource.TEXTURE_FORMAT_R_BC4</code></li>\n<li><code>resource.TEXTURE_FORMAT_RG_BC5</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA_BC7</code></li>\n</ul>\n<dl>\n<dt><code>x</code></dt>\n<dd><span class=\"type\">number</span> optional x offset of the texture (in pixels)</dd>\n<dt><code>y</code></dt>\n<dd><span class=\"type\">number</span> optional y offset of the texture (in pixels)</dd>\n<dt><code>mipmap</code></dt>\n<dd><span class=\"type\">number</span> optional mipmap to upload the data to</dd>\n<dt><code>compression_type</code></dt>\n<dd><span class=\"type\">number</span> optional specify the compression type for the data in the buffer object that holds the texture data. Defaults to resource.COMPRESSION_TYPE_DEFAULT, i.e no compression. Supported values:</dd>\n</dl>\n<ul>\n<li><code>COMPRESSION_TYPE_DEFAULT</code></li>\n<li><code>COMPRESSION_TYPE_BASIS_UASTC</code></li>\n</ul>",
          "types": [
            "table"
          ]
        },
        {
          "name": "buffer",
          "doc": "The buffer of precreated pixel data\n<span class=\"icon-attention\"></span> To update a cube map texture you need to pass in six times the amount of data via the buffer, since a cube map has six sides!",
          "types": [
            "buffer"
          ]
        }
      ],
      "examples": "How to update a specific region of an atlas by using the x,y values. Assumes the already set atlas is a 128x128 texture.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">128</span> <span class=\"o\">-</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">128</span> <span class=\"o\">-</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">VALUE_TYPE_UINT8</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">))</span>\n\n  <span class=\"kr\">for</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"kr\">do</span>\n      <span class=\"kr\">for</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"kr\">do</span>\n          <span class=\"kd\">local</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0xff</span>\n          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0x80</span>\n          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0x10</span>\n      <span class=\"kr\">end</span>\n  <span class=\"kr\">end</span>\n\n  <span class=\"kd\">local</span> <span class=\"n\">resource_path</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;texture0&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_TYPE_2D</span><span class=\"p\">,</span> <span class=\"n\">format</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_FORMAT_RGB</span><span class=\"p\">,</span> <span class=\"n\">num_mip_maps</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"p\">}</span>\n  <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span> <span class=\"n\">resource_path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span> <span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.create_atlas",
      "brief": "create an atlas resource",
      "description": "This function creates a new atlas resource that can be used in the same way as any atlas created during build time.\nThe path used for creating the atlas must be unique, trying to create a resource at a path that is already\nregistered will trigger an error. If the intention is to instead modify an existing atlas, use the <a href=\"/ref/resource#resource.set_atlas\">resource.set_atlas</a>\nfunction. Also note that the path to the new atlas resource must have a '.texturesetc' extension,\nmeaning \"/path/my_atlas\" is not a valid path but \"/path/my_atlas.texturesetc\" is.\nWhen creating the atlas, at least one geometry and one animation is required, and an error will be\nraised if these requirements are not met. A reference to the resource will be held by the collection\nthat created the resource and will automatically be released when that collection is destroyed.\nNote that releasing a resource essentially means decreasing the reference count of that resource,\nand not necessarily that it will be deleted.",
      "returnvalues": [
        {
          "name": "path",
          "doc": "Returns the atlas resource path",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource.",
          "types": [
            "string"
          ]
        },
        {
          "name": "table",
          "doc": "A table containing info about how to create the texture. Supported entries:\n<ul>\n<li>\n<dl>\n<dt><code>texture</code></dt>\n<dd><span class=\"type\">string | hash</span> the path to the texture resource, e.g \"/main/my_texture.texturec\"</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>animations</code></dt>\n<dd><span class=\"type\">table</span> a list of the animations in the atlas. Supports the following fields:</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">string</span> the id of the animation, used in e.g sprite.play_animation</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">integer</span> the width of the animation</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>height</code></dt>\n<dd><span class=\"type\">integer</span> the height of the animation</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>frame_start</code></dt>\n<dd><span class=\"type\">integer</span> index to the first geometry of the animation. Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>frame_end</code></dt>\n<dd><span class=\"type\">integer</span> index to the last geometry of the animation (non-inclusive). Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>playback</code></dt>\n<dd><span class=\"type\">constant</span> optional playback mode of the animation, the default value is <a href=\"/ref/go#go.PLAYBACK_ONCE_FORWARD\">go.PLAYBACK_ONCE_FORWARD</a></dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>fps</code></dt>\n<dd><span class=\"type\">integer</span> optional fps of the animation, the default value is 30</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>flip_vertical</code></dt>\n<dd><span class=\"type\">boolean</span> optional flip the animation vertically, the default value is false</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>flip_horizontal</code></dt>\n<dd><span class=\"type\">boolean</span> optional flip the animation horizontally, the default value is false</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>geometries</code></dt>\n<dd><span class=\"type\">table</span> A list of the geometries that should map to the texture data. Supports the following fields:</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>vertices</code></dt>\n<dd><span class=\"type\">table</span> a list of the vertices in texture space of the geometry in the form {px0, py0, px1, py1, ..., pxn, pyn}</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>uvs</code></dt>\n<dd><span class=\"type\">table</span> a list of the uv coordinates in texture space of the geometry in the form of {u0, v0, u1, v1, ..., un, vn}</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>indices</code></dt>\n<dd><span class=\"type\">table</span> a list of the indices of the geometry in the form {i0, i1, i2, ..., in}. Each tripe in the list represents a triangle.</dd>\n</dl>\n</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "Create a backing texture and an atlas\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- create an empty texture</span>\n    <span class=\"kd\">local</span> <span class=\"n\">my_texture_id</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">create_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;/my_texture.texturec&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"n\">width</span>          <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span>         <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n        <span class=\"nb\">type</span>           <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_TYPE_2D</span><span class=\"p\">,</span>\n        <span class=\"n\">format</span>         <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_FORMAT_RGBA</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\">-- optionally use resource.set_texture to upload data to texture</span>\n\n    <span class=\"c1\">-- create an atlas with one animation and one square geometry</span>\n    <span class=\"c1\">-- note that the function doesn&#39;t support hashes for the texture,</span>\n    <span class=\"c1\">-- you need to use a string for the texture path here aswell</span>\n    <span class=\"kd\">local</span> <span class=\"n\">my_atlas_id</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">create_atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/my_atlas.texturesetc&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"n\">texture</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/my_texture.texturec&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">animations</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">id</span>          <span class=\"o\">=</span> <span class=\"s2\">&quot;my_animation&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">width</span>       <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n                <span class=\"n\">height</span>      <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n                <span class=\"n\">frame_start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"n\">frame_end</span>   <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">geometries</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">vertices</span>  <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">128</span><span class=\"p\">,</span>\n                    <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n                    <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n                <span class=\"p\">},</span>\n                <span class=\"n\">uvs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">128</span><span class=\"p\">,</span>\n                    <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n                    <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n                <span class=\"p\">},</span>\n                <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\">-- assign the atlas to the &#39;sprite&#39; component on the same go</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;image&quot;</span><span class=\"p\">,</span> <span class=\"n\">my_atlas_id</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The index values are zero based where zero refers to the first entry of the vertex and uv lists"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "resource.set_atlas",
      "brief": "set atlas data",
      "description": "Sets the data for a specific atlas resource. Setting new atlas data is specified by passing in\na texture path for the backing texture of the atlas, a list of geometries and a list of animations\nthat map to the entries in the geometry list. The geometry entries are represented by three lists:\nvertices, uvs and indices that together represent triangles that are used in other parts of the\nengine to produce render objects from.\nVertex and uv coordinates for the geometries are expected to be\nin pixel coordinates where 0,0 is the top left corner of the texture.\nThere is no automatic padding or margin support when setting custom data,\nwhich could potentially cause filtering artifacts if used with a material sampler that has linear filtering.\nIf that is an issue, you need to calculate padding and margins manually before passing in the geometry data to\nthis function.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the atlas resource",
          "types": [
            "hash",
            "string"
          ]
        },
        {
          "name": "table",
          "doc": "A table containing info about the atlas. Supported entries:\n<ul>\n<li>\n<dl>\n<dt><code>texture</code></dt>\n<dd><span class=\"type\">string | hash</span> the path to the texture resource, e.g \"/main/my_texture.texturec\"</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>animations</code></dt>\n<dd><span class=\"type\">table</span> a list of the animations in the atlas. Supports the following fields:</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">string</span> the id of the animation, used in e.g sprite.play_animation</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">integer</span> the width of the animation</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>height</code></dt>\n<dd><span class=\"type\">integer</span> the height of the animation</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>frame_start</code></dt>\n<dd><span class=\"type\">integer</span> index to the first geometry of the animation. Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>frame_end</code></dt>\n<dd><span class=\"type\">integer</span> index to the last geometry of the animation (non-inclusive). Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>playback</code></dt>\n<dd><span class=\"type\">constant</span> optional playback mode of the animation, the default value is <a href=\"/ref/go#go.PLAYBACK_ONCE_FORWARD\">go.PLAYBACK_ONCE_FORWARD</a></dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>fps</code></dt>\n<dd><span class=\"type\">integer</span> optional fps of the animation, the default value is 30</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>flip_vertical</code></dt>\n<dd><span class=\"type\">boolean</span> optional flip the animation vertically, the default value is false</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>flip_horizontal</code></dt>\n<dd><span class=\"type\">boolean</span> optional flip the animation horizontally, the default value is false</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>geometries</code></dt>\n<dd><span class=\"type\">table</span> A list of the geometries that should map to the texture data. Supports the following fields:</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>vertices</code></dt>\n<dd><span class=\"type\">table</span> a list of the vertices in texture space of the geometry in the form {px0, py0, px1, py1, ..., pxn, pyn}</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>uvs</code></dt>\n<dd><span class=\"type\">table</span> a list of the uv coordinates in texture space of the geometry in the form of {u0, v0, u1, v1, ..., un, vn}</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><code>indices</code></dt>\n<dd><span class=\"type\">table</span> a list of the indices of the geometry in the form {i0, i1, i2, ..., in}. Each tripe in the list represents a triangle.</dd>\n</dl>\n</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "Sets atlas data for a 256x256 texture with a single animation being rendered as a quad\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">texture</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/main/my_256x256_texture.texturec&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">animations</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">id</span>          <span class=\"o\">=</span> <span class=\"s2\">&quot;my_animation&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">width</span>       <span class=\"o\">=</span> <span class=\"mi\">256</span><span class=\"p\">,</span>\n                <span class=\"n\">height</span>      <span class=\"o\">=</span> <span class=\"mi\">256</span><span class=\"p\">,</span>\n                <span class=\"n\">frame_start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"n\">frame_end</span>   <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">geometries</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">256</span><span class=\"p\">,</span>\n                    <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span>\n                    <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n                <span class=\"p\">},</span>\n                <span class=\"n\">uvs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span>\n                    <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span>\n                    <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n                <span class=\"p\">},</span>\n                <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span> <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set_atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/main/test.a.texturesetc&quot;</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Custom atlas data is not compatible with slice-9 for sprites",
        "The index values are zero based where zero refers to the first entry of the vertex and uv lists"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "resource.get_atlas",
      "brief": "Get atlas data",
      "description": "Returns the atlas data for an atlas",
      "returnvalues": [
        {
          "name": "data",
          "doc": "A table with the following entries:\n<ul>\n<li>texture</li>\n<li>geometries</li>\n<li>animations</li>\n</ul>\nSee <a href=\"/ref/resource#resource.set_atlas\">resource.set_atlas</a> for a detailed description of each field",
          "types": [
            "table"
          ]
        }
      ],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the atlas resource",
          "types": [
            "hash",
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.set_sound",
      "brief": "Update internal sound resource",
      "description": "Update internal sound resource (wavc/oggc) with new data",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource",
          "types": [
            "hash",
            "string"
          ]
        },
        {
          "name": "buffer",
          "doc": "A lua string containing the binary sound data",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.get_buffer",
      "brief": "get resource buffer",
      "description": "gets the buffer from a resource",
      "returnvalues": [
        {
          "name": "buffer",
          "doc": "The resource buffer",
          "types": [
            "buffer"
          ]
        }
      ],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource",
          "types": [
            "hash",
            "string"
          ]
        }
      ],
      "examples": "How to get the data from a buffer\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">res_path</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#mesh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;vertices&quot;</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_buffer</span><span class=\"p\">(</span><span class=\"n\">res_path</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">stream_positions</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"kr\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">#</span><span class=\"n\">stream_positions</span> <span class=\"kr\">do</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">stream_positions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.set_buffer",
      "brief": "set resource buffer",
      "description": "sets the buffer of a resource",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the resource",
          "types": [
            "hash",
            "string"
          ]
        },
        {
          "name": "buffer",
          "doc": "The resource buffer",
          "types": [
            "buffer"
          ]
        }
      ],
      "examples": "How to set the data from a buffer\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">fill_stream</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">verts</span><span class=\"p\">)</span>\n    <span class=\"kr\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"kr\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"p\">)</span> <span class=\"kr\">do</span>\n        <span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">verts</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">res_path</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#mesh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;vertices&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n         <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">num_verts</span> <span class=\"o\">=</span> <span class=\"o\">#</span><span class=\"n\">positions</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n\n    <span class=\"c1\">-- create a new buffer</span>\n    <span class=\"kd\">local</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">num_verts</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"p\">{</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;position&quot;</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">VALUE_TYPE_FLOAT32</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_buffer</span><span class=\"p\">(</span><span class=\"n\">res_path</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">stream_positions</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fill_stream</span><span class=\"p\">(</span><span class=\"n\">stream_positions</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"p\">)</span>\n\n    <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set_buffer</span><span class=\"p\">(</span><span class=\"n\">res_path</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.get_text_metrics",
      "brief": "gets the text metrics for a font",
      "description": "Gets the text metrics from a font",
      "returnvalues": [
        {
          "name": "metrics",
          "doc": "a table with the following fields:\n<ul>\n<li>width</li>\n<li>height</li>\n<li>max_ascent</li>\n<li>max_descent</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "parameters": [
        {
          "name": "url",
          "doc": "the font to get the (unscaled) metrics from",
          "types": [
            "hash"
          ]
        },
        {
          "name": "text",
          "doc": "text to measure",
          "types": [
            "string"
          ]
        },
        {
          "name": "[options]",
          "doc": "A table containing parameters for the text. Supported entries:\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">integer</span> The width of the text field. Not used if <code>line_break</code> is false.</dd>\n<dt><code>leading</code></dt>\n<dd><span class=\"type\">number</span> The leading (default 1.0)</dd>\n<dt><code>tracking</code></dt>\n<dd><span class=\"type\">number</span> The leading (default 0.0)</dd>\n<dt><code>line_break</code></dt>\n<dd><span class=\"type\">boolean</span> If the calculation should consider line breaks (default false)</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;font&quot;</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_text_metrics</span><span class=\"p\">(</span><span class=\"n\">font</span><span class=\"p\">,</span> <span class=\"s2\">&quot;The quick brown fox</span><span class=\"se\">\\n</span><span class=\"s2\"> jumps over the lazy dog&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_TYPE_2D",
      "brief": "2D texture type",
      "description": "2D texture type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_TYPE_CUBE_MAP",
      "brief": "Cube map texture type",
      "description": "Cube map texture type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_LUMINANCE",
      "brief": "luminance type texture format",
      "description": "luminance type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGB",
      "brief": "RGB type texture format",
      "description": "RGB type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA",
      "brief": "RGBA type texture format",
      "description": "RGBA type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1",
      "brief": "RGB_PVRTC_2BPPV1 type texture format",
      "description": "RGB_PVRTC_2BPPV1 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1",
      "brief": "RGB_PVRTC_4BPPV1 type texture format",
      "description": "RGB_PVRTC_4BPPV1 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1",
      "brief": "RGBA_PVRTC_2BPPV1 type texture format",
      "description": "RGBA_PVRTC_2BPPV1 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1",
      "brief": "RGBA_PVRTC_4BPPV1 type texture format",
      "description": "RGBA_PVRTC_4BPPV1 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGB_ETC1",
      "brief": "RGB_ETC1 type texture format",
      "description": "RGB_ETC1 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA_ETC2",
      "brief": "RGBA_ETC2 type texture format",
      "description": "RGBA_ETC2 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA_ASTC_4x4",
      "brief": "RGBA_ASTC_4x4 type texture format",
      "description": "RGBA_ASTC_4x4 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGB_BC1",
      "brief": "RGB_BC1 type texture format",
      "description": "RGB_BC1 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA_BC3",
      "brief": "RGBA_BC3 type texture format",
      "description": "RGBA_BC3 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_R_BC4",
      "brief": "R_BC4 type texture format",
      "description": "R_BC4 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RG_BC5",
      "brief": "RG_BC5 type texture format",
      "description": "RG_BC5 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.TEXTURE_FORMAT_RGBA_BC7",
      "brief": "RGBA_BC7 type texture format",
      "description": "RGBA_BC7 type texture format",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.COMPRESSION_TYPE_DEFAULT",
      "brief": "COMPRESSION_TYPE_DEFAULT compression type",
      "description": "COMPRESSION_TYPE_DEFAULT compression type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.COMPRESSION_TYPE_BASIS_UASTC",
      "brief": "BASIS_UASTC compression type",
      "description": "BASIS_UASTC compression type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_OK",
      "brief": "LIVEUPDATE_OK",
      "description": "LIVEUPDATE_OK",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_INVALID_RESOURCE",
      "brief": "LIVEUPDATE_INVALID_RESOURCE",
      "description": "The handled resource is invalid.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_VERSION_MISMATCH",
      "brief": "LIVEUPDATE_VERSION_MISMATCH",
      "description": "Mismatch between manifest expected version and actual version.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH",
      "brief": "LIVEUPDATE_ENGINE_VERSION_MISMATCH",
      "description": "Mismatch between running engine version and engine versions supported by manifest.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_SIGNATURE_MISMATCH",
      "brief": "LIVEUPDATE_SIGNATURE_MISMATCH",
      "description": "Mismatch between manifest expected signature and actual signature.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_SCHEME_MISMATCH",
      "brief": "LIVEUPDATE_SCHEME_MISMATCH",
      "description": "Mismatch between scheme used to load resources. Resources are loaded with a different scheme than from manifest, for example over HTTP or directly from file. This is typically the case when running the game directly from the editor instead of from a bundle.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH",
      "brief": "LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH",
      "description": "Mismatch between between expected bundled resources and actual bundled resources. The manifest expects a resource to be in the bundle, but it was not found in the bundle. This is typically the case when a non-excluded resource was modified between publishing the bundle and publishing the manifest.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "resource.LIVEUPDATE_FORMAT_ERROR",
      "brief": "LIVEUPDATE_FORMAT_ERROR",
      "description": "Failed to parse manifest data buffer. The manifest was probably produced by a different engine version.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.get_current_manifest",
      "brief": "return a reference to the Manifest that is currently loaded",
      "description": "Return a reference to the Manifest that is currently loaded.",
      "returnvalues": [
        {
          "name": "manifest_reference",
          "doc": "reference to the Manifest that is currently loaded",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.store_resource",
      "brief": "add a resource to the data archive and runtime index",
      "description": "add a resource to the data archive and runtime index. The resource will be verified\ninternally before being added to the data archive.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "manifest_reference",
          "doc": "The manifest to check against.",
          "types": [
            "number"
          ]
        },
        {
          "name": "data",
          "doc": "The resource data that should be stored.",
          "types": [
            "string"
          ]
        },
        {
          "name": "hexdigest",
          "doc": "The expected hash for the resource,\nretrieved through collectionproxy.missing_resources.",
          "types": [
            "string"
          ]
        },
        {
          "name": "callback",
          "doc": "The callback\nfunction that is executed once the engine has been attempted to store\nthe resource.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>hexdigest</code></dt>\n<dd><span class=\"type\">string</span> The hexdigest of the resource.</dd>\n<dt><code>status</code></dt>\n<dd><span class=\"type\">boolean</span> Whether or not the resource was successfully stored.</dd>\n</dl>",
          "types": [
            "function(self, hexdigest, status)"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">manifest</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_current_manifest</span><span class=\"p\">()</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">callback_store_resource</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">hexdigest</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n     <span class=\"kr\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n          <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Successfully stored resource: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">hexdigest</span><span class=\"p\">)</span>\n     <span class=\"kr\">else</span>\n          <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to store resource: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">hexdigest</span><span class=\"p\">)</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">load_resources</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">collectionproxy</span><span class=\"p\">.</span><span class=\"n\">missing_resources</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n     <span class=\"kr\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">resource_hash</span> <span class=\"kr\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">resources</span><span class=\"p\">)</span> <span class=\"kr\">do</span>\n          <span class=\"kd\">local</span> <span class=\"n\">baseurl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;http://example.defold.com:8000/&quot;</span>\n          <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">baseurl</span> <span class=\"o\">..</span> <span class=\"n\">resource_hash</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n               <span class=\"kr\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"kr\">then</span>\n                    <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">store_resource</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">manifest</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">resource_hash</span><span class=\"p\">,</span> <span class=\"n\">callback_store_resource</span><span class=\"p\">)</span>\n               <span class=\"kr\">else</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to download resource: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">resource_hash</span><span class=\"p\">)</span>\n               <span class=\"kr\">end</span>\n          <span class=\"kr\">end</span><span class=\"p\">)</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.store_manifest",
      "brief": "create, verify, and store a manifest to device",
      "description": "Create a new manifest from a buffer. The created manifest is verified\nby ensuring that the manifest was signed using the bundled public/private\nkey-pair during the bundle process and that the manifest supports the current\nrunning engine version. Once the manifest is verified it is stored on device.\nThe next time the engine starts (or is rebooted) it will look for the stored\nmanifest before loading resources. Storing a new manifest allows the\ndeveloper to update the game, modify existing resources, or add new\nresources to the game through LiveUpdate.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "manifest_buffer",
          "doc": "the binary data that represents the manifest",
          "types": [
            "string"
          ]
        },
        {
          "name": "callback",
          "doc": "the callback function\nexecuted once the engine has attempted to store the manifest.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>status</code></dt>\n<dd><span class=\"type\">constant</span> the status of the store operation:</dd>\n</dl>\n<ul>\n<li><code>resource.LIVEUPATE_OK</code></li>\n<li><code>resource.LIVEUPATE_INVALID_RESOURCE</code></li>\n<li><code>resource.LIVEUPATE_VERSION_MISMATCH</code></li>\n<li><code>resource.LIVEUPATE_ENGINE_VERSION_MISMATCH</code></li>\n<li><code>resource.LIVEUPATE_SIGNATURE_MISMATCH</code></li>\n<li><code>resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH</code></li>\n<li><code>resource.LIVEUPDATE_FORMAT_ERROR</code></li>\n</ul>",
          "types": [
            "function(self, status)"
          ]
        }
      ],
      "examples": "How to download a manifest with HTTP and store it on device.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">store_manifest_cb</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">LIVEUPATE_OK</span> <span class=\"kr\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"s2\">&quot;Successfully stored manifest. This manifest will be loaded instead of the bundled manifest the next time the engine starts.&quot;</span><span class=\"p\">)</span>\n  <span class=\"kr\">else</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to store manifest&quot;</span><span class=\"p\">)</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">download_and_store_manifest</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">MANIFEST_URL</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n      <span class=\"kr\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"kr\">then</span>\n        <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">store_manifest</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">store_manifest_cb</span><span class=\"p\">)</span>\n      <span class=\"kr\">end</span>\n    <span class=\"kr\">end</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.store_archive",
      "brief": "register and store a live update zip file",
      "description": "Stores a zip file and uses it for live update content. The contents of the\nzip file will be verified against the manifest to ensure file integrity.\nIt is possible to opt out of the resource verification using an option passed\nto this function.\nThe path is stored in the (internal) live update location.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "the path to the original file on disc",
          "types": [
            "string"
          ]
        },
        {
          "name": "callback",
          "doc": "the callback function\nexecuted after the storage has completed\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>status</code></dt>\n<dd><span class=\"type\">constant</span> the status of the store operation (See resource.store_manifest)</dd>\n</dl>",
          "types": [
            "function(self, status)"
          ]
        },
        {
          "name": "[options]",
          "doc": "optional table with extra parameters. Supported entries:\n<ul>\n<li><span class=\"type\">boolean</span> <code>verify</code>: if archive should be verified as well as stored (defaults to true)</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to download an archive with HTTP and store it on device.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">LIVEUPDATE_URL</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">a</span> <span class=\"n\">file</span> <span class=\"n\">server</span> <span class=\"n\">url</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\">-- This can be anything, but you should keep the platform bundles apart</span>\n<span class=\"kd\">local</span> <span class=\"n\">ZIP_FILENAME</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;defold.resourcepack.zip&#39;</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">APP_SAVE_DIR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LiveUpdateDemo&quot;</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;levels#level1&quot;</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;INIT: is_using_liveupdate_data:&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">is_using_liveupdate_data</span><span class=\"p\">())</span>\n    <span class=\"c1\">-- let&#39;s download the archive</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;#&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;attempt_download_archive&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"c1\">-- helper function to store headers from the http request (e.g. the ETag)</span>\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">store_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">get_save_file</span><span class=\"p\">(</span><span class=\"n\">APP_SAVE_DIR</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">load_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">get_save_file</span><span class=\"p\">(</span><span class=\"n\">APP_SAVE_DIR</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kr\">return</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"c1\">-- returns headers that can potentially generate a 304</span>\n<span class=\"c1\">-- without redownloading the file again</span>\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">get_http_request_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"kr\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"kr\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"kr\">do</span>\n        <span class=\"kr\">if</span> <span class=\"nb\">string.lower</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;etag&#39;</span> <span class=\"kr\">then</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;If-None-Match&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"kr\">elseif</span> <span class=\"nb\">string.lower</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;last-modified&#39;</span> <span class=\"kr\">then</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;If-Modified-Since&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">end</span>\n    <span class=\"kr\">return</span> <span class=\"n\">headers</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">store_archive_cb</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Successfully stored live update archive!&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">reboot</span><span class=\"p\">()</span>\n    <span class=\"kr\">else</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to store live update archive, &quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"c1\">-- remove the path</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;attempt_download_archive&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n\n        <span class=\"c1\">-- by supplying the ETag, we don&#39;t have to redownload the file again</span>\n        <span class=\"c1\">-- if we already have downloaded it.</span>\n        <span class=\"kd\">local</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">get_http_request_headers</span><span class=\"p\">(</span><span class=\"n\">ZIP_FILENAME</span> <span class=\"o\">..</span> <span class=\"s1\">&#39;.json&#39;</span><span class=\"p\">)</span>\n        <span class=\"kr\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">is_using_liveupdate_data</span><span class=\"p\">()</span> <span class=\"kr\">then</span>\n            <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\">-- live update data has been purged, and we need do a fresh download</span>\n        <span class=\"kr\">end</span>\n\n        <span class=\"kd\">local</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">get_save_file</span><span class=\"p\">(</span><span class=\"n\">APP_SAVE_DIR</span><span class=\"p\">,</span> <span class=\"n\">ZIP_FILENAME</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"p\">,</span>        <span class=\"c1\">-- a temporary file on disc. will be removed upon successful liveupdate storage</span>\n            <span class=\"n\">ignore_cache</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">-- we don&#39;t want to store a (potentially large) duplicate in our http cache</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">local</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">LIVEUPDATE_URL</span> <span class=\"o\">..</span> <span class=\"n\">ZIP_FILENAME</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Downloading&quot;</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n            <span class=\"kr\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">304</span> <span class=\"kr\">then</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%d: Archive zip file up-to-date&quot;</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">))</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"ow\">and</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"kr\">then</span>\n                <span class=\"c1\">-- register the path to the live update system</span>\n                <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">store_archive</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">store_archive_cb</span><span class=\"p\">)</span>\n                <span class=\"c1\">-- at this point, the &quot;path&quot; has been moved internally to a different location</span>\n\n                <span class=\"c1\">-- save the ETag for the next run</span>\n                <span class=\"n\">store_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">ZIP_FILENAME</span> <span class=\"o\">..</span> <span class=\"s1\">&#39;.json&#39;</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n            <span class=\"kr\">else</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error when downloading&quot;</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;to&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>\n            <span class=\"kr\">end</span>\n\n            <span class=\"c1\">-- If we got a 200, we would call store_archive_cb() then reboot</span>\n            <span class=\"c1\">-- Second time, if we get here, it should be after a 304, and then</span>\n            <span class=\"c1\">-- we can load the missing resources from the liveupdate archive</span>\n            <span class=\"kr\">if</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">is_using_liveupdate_data</span><span class=\"p\">()</span> <span class=\"kr\">then</span>\n                <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">proxy</span><span class=\"p\">,</span> <span class=\"s2\">&quot;load&quot;</span><span class=\"p\">)</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">end</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "resource.is_using_liveupdate_data",
      "brief": "is any liveupdate data mounted and currently in use",
      "description": "Is any liveupdate data mounted and currently in use?\nThis can be used to determine if a new manifest or zip file should be downloaded.",
      "returnvalues": [
        {
          "name": "bool",
          "doc": "true if a liveupdate archive (any format) has been loaded",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "resource",
    "name": "Resource",
    "brief": "Resource API documentation",
    "description": "Functions and constants to access resources.",
    "path": "",
    "file": "",
    "notes": [],
    "group": "SYSTEM"
  }
}
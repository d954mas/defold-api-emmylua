{
  "elements": [
    {
      "type": "VARIABLE",
      "name": "SOCKET_TIMEOUT",
      "brief": "Socket default timeout value",
      "description": "Socket default timeout value",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "Socket",
      "brief": "Socket type definition",
      "description": "Socket type definition",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Use dmSocket::INVALID_SOCKET_HANDLE instead of zero for unset values. This is an exception\nfrom all other handles."
      ]
    },
    {
      "type": "VARIABLE",
      "name": "INVALID_SOCKET_HANDLE",
      "brief": "Invalid socket handle",
      "description": "Invalid socket handle",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Domain",
      "brief": "domain type",
      "description": "Domain type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "DOMAIN_MISSING",
          "doc": "",
          "type": ""
        },
        {
          "name": "DOMAIN_IPV4",
          "doc": "",
          "type": ""
        },
        {
          "name": "DOMAIN_IPV6",
          "doc": "",
          "type": ""
        },
        {
          "name": "DOMAIN_UNKNOWN",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Type",
      "brief": "socket type",
      "description": "Socket type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "TYPE_STREAM",
          "doc": "",
          "type": ""
        },
        {
          "name": "TYPE_DGRAM",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Protocol",
      "brief": "network protocol",
      "description": "Network protocol",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "PROTOCOL_TCP",
          "doc": "",
          "type": ""
        },
        {
          "name": "PROTOCOL_UDP",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "ShutdownType",
      "brief": "socket shutdown type",
      "description": "Socket shutdown type",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "SHUTDOWNTYPE_READ",
          "doc": "",
          "type": ""
        },
        {
          "name": "SHUTDOWNTYPE_WRITE",
          "doc": "",
          "type": ""
        },
        {
          "name": "SHUTDOWNTYPE_READWRITE",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Result",
      "brief": "socket result",
      "description": "Socket result",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "RESULT_OK",
          "doc": "0",
          "type": ""
        },
        {
          "name": "RESULT_ACCES",
          "doc": "-1",
          "type": ""
        },
        {
          "name": "RESULT_AFNOSUPPORT",
          "doc": "-2",
          "type": ""
        },
        {
          "name": "RESULT_WOULDBLOCK",
          "doc": "-3",
          "type": ""
        },
        {
          "name": "RESULT_BADF",
          "doc": "-4",
          "type": ""
        },
        {
          "name": "RESULT_CONNRESET",
          "doc": "-5",
          "type": ""
        },
        {
          "name": "RESULT_DESTADDRREQ",
          "doc": "-6",
          "type": ""
        },
        {
          "name": "RESULT_FAULT",
          "doc": "-7",
          "type": ""
        },
        {
          "name": "RESULT_HOSTUNREACH",
          "doc": "-8",
          "type": ""
        },
        {
          "name": "RESULT_INTR",
          "doc": "-9",
          "type": ""
        },
        {
          "name": "RESULT_INVAL",
          "doc": "-10",
          "type": ""
        },
        {
          "name": "RESULT_ISCONN",
          "doc": "-11",
          "type": ""
        },
        {
          "name": "RESULT_MFILE",
          "doc": "-12",
          "type": ""
        },
        {
          "name": "RESULT_MSGSIZE",
          "doc": "-13",
          "type": ""
        },
        {
          "name": "RESULT_NETDOWN",
          "doc": "-14",
          "type": ""
        },
        {
          "name": "RESULT_NETUNREACH",
          "doc": "-15",
          "type": ""
        },
        {
          "name": "RESULT_NOBUFS",
          "doc": "-17",
          "type": ""
        },
        {
          "name": "RESULT_NOTCONN",
          "doc": "-20",
          "type": ""
        },
        {
          "name": "RESULT_NOTSOCK",
          "doc": "-22",
          "type": ""
        },
        {
          "name": "RESULT_OPNOTSUPP",
          "doc": "-23",
          "type": ""
        },
        {
          "name": "RESULT_PIPE",
          "doc": "-24",
          "type": ""
        },
        {
          "name": "RESULT_PROTONOSUPPORT",
          "doc": "-25",
          "type": ""
        },
        {
          "name": "RESULT_PROTOTYPE",
          "doc": "-26",
          "type": ""
        },
        {
          "name": "RESULT_TIMEDOUT",
          "doc": "-27",
          "type": ""
        },
        {
          "name": "RESULT_ADDRNOTAVAIL",
          "doc": "-28",
          "type": ""
        },
        {
          "name": "RESULT_CONNREFUSED",
          "doc": "-29",
          "type": ""
        },
        {
          "name": "RESULT_ADDRINUSE",
          "doc": "-30",
          "type": ""
        },
        {
          "name": "RESULT_CONNABORTED",
          "doc": "-31",
          "type": ""
        },
        {
          "name": "RESULT_INPROGRESS",
          "doc": "-32",
          "type": ""
        },
        {
          "name": "RESULT_HOST_NOT_FOUND",
          "doc": "-100",
          "type": ""
        },
        {
          "name": "RESULT_TRY_AGAIN",
          "doc": "-101",
          "type": ""
        },
        {
          "name": "RESULT_NO_RECOVERY",
          "doc": "-102",
          "type": ""
        },
        {
          "name": "RESULT_NO_DATA",
          "doc": "-103",
          "type": ""
        },
        {
          "name": "RESULT_UNKNOWN",
          "doc": "-1000",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "Address",
      "brief": "network address",
      "description": "Network addresses were previously represented as an uint32_t, but in\norder to support IPv6 the internal representation was changed to a struct.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "New",
      "brief": "create a socket",
      "description": "Create a new socket. Corresponds to BSD socket function socket().",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on succcess",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "type",
          "doc": "Socket type",
          "types": [
            "Type"
          ]
        },
        {
          "name": "protocol",
          "doc": "Protocol",
          "types": [
            "Protocol"
          ]
        },
        {
          "name": "socket",
          "doc": "Pointer to socket",
          "types": [
            "Socket*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "SIGPIPE is disabled on applicable platforms. This has the implication\nthat Receive can return zero bytes when the connection is closed by remote peer."
      ]
    },
    {
      "type": "FUNCTION",
      "name": "Delete",
      "brief": "delete a socket",
      "description": "Delete a socket. Corresponds to BSD socket function close()",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to close",
          "types": [
            "Socket"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Connect",
      "brief": "make a connection",
      "description": "Initiate a connection on a socket",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to initiate connection on",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "address",
          "doc": "Address to connect to",
          "types": [
            "Address"
          ]
        },
        {
          "name": "port",
          "doc": "Port to connect to",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Shutdown",
      "brief": "close socket",
      "description": "Shutdown part of a socket connection",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to shutdown connection ow",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "how",
          "doc": "Shutdown type",
          "types": [
            "ShutdownType"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetFD",
      "brief": "get underlying file descriptor",
      "description": "Get underlying file descriptor",
      "returnvalues": [
        {
          "name": "",
          "doc": "file-descriptor",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "socket to get fd for",
          "types": [
            "Socket"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetReuseAddress",
      "brief": "Set reuse socket address option on socket. Socket ...",
      "description": "Set reuse socket address option on socket. Socket option SO_REUSEADDR on most platforms",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to set reuse address to",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "reuse",
          "doc": "True if reuse",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetBroadcast",
      "brief": "Set broadcast address option on socket. Socket opt...",
      "description": "Set broadcast address option on socket. Socket option SO_BROADCAST on most platforms.",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to set reuse address to",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "broadcast",
          "doc": "True if broadcast",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetBlocking",
      "brief": "Set blocking option on a socket",
      "description": "Set blocking option on a socket",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to set blocking on",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "blocking",
          "doc": "True to block",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetNoDelay",
      "brief": "Set TCP_NODELAY on socket",
      "description": "Set TCP_NODELAY on socket",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to set TCP_NODELAY on",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "no_delay",
          "doc": "True for no delay",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetQuickAck",
      "brief": "Set TCP_QUICKACK on socket",
      "description": "Set TCP_QUICKACK on socket",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to set TCP_QUICKACK on",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "use_quick_ack",
          "doc": "False to disable quick ack",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "This is a no op on platforms that doesn't support it"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "SetSendTimeout",
      "brief": "Set socket send timeout",
      "description": "Set socket send timeout",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "socket",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "timeout",
          "doc": "timeout in microseconds",
          "types": [
            "uint64_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Timeout resolution might be in milliseconds, e.g. windows. Use values\n      larger than or equal to 1000."
      ]
    },
    {
      "type": "FUNCTION",
      "name": "SetReceiveTimeout",
      "brief": "Set socket receive timeout",
      "description": "Set socket receive timeout",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "socket",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "timeout",
          "doc": "timeout in microseconds",
          "types": [
            "uint64_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Timeout resolution might be in milliseconds, e.g. windows. Use values\n      larger than or equal to 1000"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "Send",
      "brief": "Send a message on a socket",
      "description": "Send a message on a socket",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to send a message on",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "buffer",
          "doc": "Buffer to send",
          "types": [
            "void*"
          ]
        },
        {
          "name": "length",
          "doc": "Length of buffer to send",
          "types": [
            "int"
          ]
        },
        {
          "name": "sent_bytes[out]",
          "doc": "Number of bytes sent (result)",
          "types": [
            "int*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "For dmSocket::Recv() and dmSocket::Send() function ETIMEDOUT is translated to EWOULDBLOCK\non win32 for compatibility with BSD sockets."
      ]
    },
    {
      "type": "FUNCTION",
      "name": "Receive",
      "brief": "Receive data on a socket",
      "description": "Receive data on a socket",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "socket",
          "doc": "Socket to receive data on",
          "types": [
            "Socket"
          ]
        },
        {
          "name": "buffer[out]",
          "doc": "Buffer to receive to",
          "types": [
            "void*"
          ]
        },
        {
          "name": "length",
          "doc": "Receive buffer length",
          "types": [
            "int"
          ]
        },
        {
          "name": "received_bytes[out]",
          "doc": "Number of received bytes (result)",
          "types": [
            "int*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "For dmSocket::Recv() and dmSocket::Send() function ETIMEDOUT is translated to EWOULDBLOCK\non win32 for compatibility with BSD sockets."
      ]
    },
    {
      "type": "FUNCTION",
      "name": "GetHostByName",
      "brief": "get host by name",
      "description": "Get host by name",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "name",
          "doc": "Hostname to resolve",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "address",
          "doc": "Host address result",
          "types": [
            "Address*"
          ]
        },
        {
          "name": "ipv4",
          "doc": "Whether or not to search for IPv4 addresses",
          "types": [
            "bool"
          ]
        },
        {
          "name": "ipv6",
          "doc": "Whether or not to search for IPv6 addresses",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetHostByName",
      "brief": "get host by name with timeout and cancelability",
      "description": "Get host by name with timeout and cancelability",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "name",
          "doc": "Hostname to resolve",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "address",
          "doc": "Host address result",
          "types": [
            "Address*"
          ]
        },
        {
          "name": "timeout",
          "doc": "Timeout in microseconds",
          "types": [
            "uint64_t"
          ]
        },
        {
          "name": "cancelflag",
          "doc": "if non null and set, will abort the call",
          "types": [
            "int*"
          ]
        },
        {
          "name": "ipv4",
          "doc": "Whether or not to search for IPv4 addresses",
          "types": [
            "bool"
          ]
        },
        {
          "name": "ipv6",
          "doc": "Whether or not to search for IPv6 addresses",
          "types": [
            "bool"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "On HTML5, this function is a wrapper for dmSocket::GetHostByName"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "ResultToString",
      "brief": "Convert result value to string",
      "description": "Convert result value to string",
      "returnvalues": [
        {
          "name": "",
          "doc": "Result as string",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "result",
          "doc": "Result to convert",
          "types": [
            "Result"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "SelectorKind",
      "brief": "Selector kind",
      "description": "Selector kind",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "SELECTOR_KIND_READ",
          "doc": "",
          "type": ""
        },
        {
          "name": "SELECTOR_KIND_WRITE",
          "doc": "",
          "type": ""
        },
        {
          "name": "SELECTOR_KIND_EXCEPT",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "Selector",
      "brief": "Selector",
      "description": "Selector",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SelectorClear",
      "brief": "Clear selector for socket. Similar to FD_CLR",
      "description": "Clear selector for socket. Similar to FD_CLR",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "doc": "Selector",
          "types": [
            "Selector*"
          ]
        },
        {
          "name": "selector_kind",
          "doc": "Kind to clear",
          "types": [
            "SelectorKind"
          ]
        },
        {
          "name": "socket",
          "doc": "Socket to clear",
          "types": [
            "Socket"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SelectorSet",
      "brief": "Set selector for socket. Similar to FD_SET",
      "description": "Set selector for socket. Similar to FD_SET",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "doc": "Selector",
          "types": [
            "Selector*"
          ]
        },
        {
          "name": "selector_kind",
          "doc": "Kind to clear",
          "types": [
            "SelectorKind"
          ]
        },
        {
          "name": "socket",
          "doc": "Socket to set",
          "types": [
            "Socket"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SelectorIsSet",
      "brief": "Check if selector is set. Similar to FD_ISSET",
      "description": "Check if selector is set. Similar to FD_ISSET",
      "returnvalues": [
        {
          "name": "",
          "doc": "True if set.",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "doc": "Selector",
          "types": [
            "Selector*"
          ]
        },
        {
          "name": "selector_kind",
          "doc": "Selector kind",
          "types": [
            "SelectorKind"
          ]
        },
        {
          "name": "socket",
          "doc": "Socket to check for",
          "types": [
            "Socket"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SelectorZero",
      "brief": "Clear selector (all kinds). Similar to FD_ZERO",
      "description": "Clear selector (all kinds). Similar to FD_ZERO",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "doc": "Selector",
          "types": [
            "Selector*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Select",
      "brief": "Select for pending data",
      "description": "Select for pending data",
      "returnvalues": [
        {
          "name": "",
          "doc": "RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "doc": "Selector",
          "types": [
            "Selector*"
          ]
        },
        {
          "name": "timeout",
          "doc": "Timeout. For blocking pass -1. (microseconds)",
          "types": [
            "int"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmSocket",
    "name": "Socket",
    "brief": "SDK Socket API documentation",
    "description": "Socket functions.",
    "path": "engine/dlib/src/dmsdk/dlib/socket.h",
    "file": "dmsdk/dlib/socket.h",
    "notes": [],
    "group": "DEFOLD SDK"
  }
}
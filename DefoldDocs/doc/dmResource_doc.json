{
  "elements": [
    {
      "type": "FUNCTION",
      "name": "SResourceDescriptor",
      "brief": "Resource descriptor",
      "description": "Resource descriptor",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_NameHash",
          "doc": "Hash of resource name",
          "type": "uint64_t"
        },
        {
          "name": "m_Resource",
          "doc": "Resource pointer. Must be unique and not NULL.",
          "type": "void*"
        },
        {
          "name": "m_PrevResource",
          "doc": "Resource pointer. Resource pointer to a previous version of the resource, iff it exists. Only used when recreating resources.",
          "type": "void*"
        },
        {
          "name": "m_ResourceSize",
          "doc": "Resource size in memory. I.e. the payload of m_Resource",
          "type": "uint32_t"
        }
      ],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_DECLARE_RESOURCE_TYPE",
      "brief": "declare a new extension",
      "description": "Declare and register new extension to the engine.\nThis macro is used to declare the extension callback functions used by the engine to communicate with the extension.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "symbol",
          "doc": "external extension symbol description (no quotes).",
          "types": [
            "symbol"
          ]
        },
        {
          "name": "suffix",
          "doc": "The file resource suffix, without a \".\".",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "register_fn",
          "doc": "type register function\n<dl>\n<dt><code>ctx</code></dt>\n<dd><span class=\"type\">dmResource::ResourceTypeRegisterContext&amp;</span> Reference to an <code>ResourceTypeRegisterContext</code> structure.</dd>\n</dl>",
          "types": [
            "function(dmResource::ResourceTypeRegisterContext& ctx)"
          ]
        },
        {
          "name": "deregister_fn",
          "doc": "type deregister function. May be null.\n<dl>\n<dt><code>ctx</code></dt>\n<dd><span class=\"type\">dmResource::ResourceTypeRegisterContext&amp;</span> Reference to an <code>ResourceTypeRegisterContext</code> structure.</dd>\n</dl>",
          "types": [
            "function(dmResource::ResourceTypeRegisterContext& ctx)"
          ]
        }
      ],
      "examples": "Register a new type:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">ResourceTypeScriptCreate</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">ResourceTypeScriptDestroy</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">ResourceTypeScriptRecreate</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">BlobContext</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">RegisterResourceTypeBlob</span><span class=\"p\">(</span><span class=\"n\">ResourceTypeRegisterContext</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// The engine.cpp creates the contexts for our built in types.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Here we register a custom type</span>\n<span class=\"w\">    </span><span class=\"n\">BlobContext</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">BlobContext</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Contexts</span><span class=\"p\">.</span><span class=\"n\">Put</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_NameHash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">context</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">RegisterType</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Factory</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ResourceTypeScriptCreate</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ResourceTypeScriptDestroy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                       </span><span class=\"n\">ResourceTypeScriptRecreate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">dmResource</span><span class=\"o\">::</span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">DeregisterResourceTypeScript</span><span class=\"p\">(</span><span class=\"n\">ResourceTypeRegisterContext</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BlobContext</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">BlobContext</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Contexts</span><span class=\"p\">.</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_NameHash</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">delete</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"n\">DM_DECLARE_RESOURCE_TYPE</span><span class=\"p\">(</span><span class=\"n\">ResourceTypeBlob</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;blobc&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RegisterResourceTypeBlob</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DeregisterResourceTypeScript</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Get",
      "brief": "Get a resource from factory",
      "description": "Get a resource from factory",
      "returnvalues": [
        {
          "name": "result",
          "doc": "RESULT_OK on success",
          "types": [
            "dmResource::Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "factory",
          "doc": "Factory handle",
          "types": [
            "dmResource::HFactory"
          ]
        },
        {
          "name": "name",
          "doc": "Resource name",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "resource",
          "doc": "Created resource",
          "types": [
            "void**"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Get",
      "brief": "Get a resource from factory",
      "description": "Get a resource from factory",
      "returnvalues": [
        {
          "name": "result",
          "doc": "RESULT_OK on success",
          "types": [
            "dmResource::Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "factory",
          "doc": "Factory handle",
          "types": [
            "dmResource::HFactory"
          ]
        },
        {
          "name": "name",
          "doc": "Resource name",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "resource",
          "doc": "Created resource",
          "types": [
            "void**"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Release",
      "brief": "Release resource",
      "description": "Release resource",
      "returnvalues": [],
      "parameters": [
        {
          "name": "factory",
          "doc": "Factory handle",
          "types": [
            "dmResource::HFactory"
          ]
        },
        {
          "name": "resource",
          "doc": "Resource pointer",
          "types": [
            "void*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "PreloadHint",
      "brief": "Hint the preloader what to load before Create is c...",
      "description": "Hint the preloader what to load before Create is called on the resource.\nThe resources are not guaranteed to be loaded before Create is called.\nThis function can be called from a worker thread.",
      "returnvalues": [
        {
          "name": "result",
          "doc": "if successfully invoking preloader.",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "factory",
          "doc": "Preloader handle",
          "types": [
            "dmResource::HPreloadHintInfo"
          ]
        },
        {
          "name": "name",
          "doc": "Resource name",
          "types": [
            "const char*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmResource",
    "name": "Resource",
    "brief": "Resource",
    "description": "Functions for managing resource types.",
    "path": "engine/resource/src/dmsdk/resource/resource.h",
    "file": "dmsdk/resource/resource.h",
    "notes": [],
    "group": "DEFOLD SDK"
  }
}
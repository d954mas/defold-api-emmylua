{
  "elements": [
    {
      "type": "VARIABLE",
      "name": "particlefx.EMITTER_STATE_SLEEPING",
      "brief": "sleeping state",
      "description": "The emitter does not have any living particles and will not spawn any particles in this state.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "particlefx.EMITTER_STATE_PRESPAWN",
      "brief": "prespawn state",
      "description": "The emitter will be in this state when it has been started but before spawning any particles. Normally the emitter is in this state for a short time, depending on if a start delay has been set for this emitter or not.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "particlefx.EMITTER_STATE_SPAWNING",
      "brief": "spawning state",
      "description": "The emitter is spawning particles.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "particlefx.EMITTER_STATE_POSTSPAWN",
      "brief": "postspawn state",
      "description": "The emitter is not spawning any particles, but has particles that are still alive.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "particlefx.play",
      "brief": "start playing a particle FX",
      "description": "Starts playing a particle FX component.\nParticle FX started this way need to be manually stopped through <code>particlefx.stop()</code>.\nWhich particle FX to play is identified by the URL.\n<span class=\"icon-attention\"></span> A particle FX will continue to emit particles even if the game object the particle FX component belonged to is deleted. You can call <code>particlefx.stop()</code> to stop it from emitting more particles.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the particle fx that should start playing.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "[emitter_state_function]",
          "doc": "optional callback function that will be called when an emitter attached to this particlefx changes state.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object</dd>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The id of the particle fx component</dd>\n<dt><code>emitter</code></dt>\n<dd><span class=\"type\">hash</span> The id of the emitter</dd>\n<dt><code>state</code></dt>\n<dd><span class=\"type\">constant</span> the new state of the emitter:</dd>\n</dl>\n<ul>\n<li><code>particlefx.EMITTER_STATE_SLEEPING</code></li>\n<li><code>particlefx.EMITTER_STATE_PRESPAWN</code></li>\n<li><code>particlefx.EMITTER_STATE_SPAWNING</code></li>\n<li><code>particlefx.EMITTER_STATE_POSTSPAWN</code></li>\n</ul>",
          "types": [
            "function(self, id, emitter, state)"
          ]
        }
      ],
      "examples": "How to play a particle fx when a game object is created.\nThe callback receives the hash of the path to the particlefx, the hash of the id\nof the emitter, and the new state of the emitter as particlefx.EMITTER_STATE_<STATE>.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">emitter_state_change</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">emitter</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">emitter</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;exhaust&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">EMITTER_STATE_POSTSPAWN</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- exhaust is done spawning particles...</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"s2\">&quot;#particlefx&quot;</span><span class=\"p\">,</span> <span class=\"n\">emitter_state_change</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "particlefx.stop",
      "brief": "stop playing a particle fx",
      "description": "Stops a particle FX component from playing.\nStopping a particle FX does not remove already spawned particles.\nWhich particle FX to stop is identified by the URL.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the particle fx that should stop playing",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "options",
          "doc": "Options when stopping the particle fx. Supported options:\n<ul>\n<li><span class=\"type\">boolean</span> <code>clear</code>: instantly clear spawned particles</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to stop a particle fx when a game object is deleted and immediately also clear\nany spawned particles:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">final</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s2\">&quot;#particlefx&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"n\">clear</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "particlefx.set_constant",
      "brief": "set a shader constant for a particle FX component emitter",
      "description": "Sets a shader constant for a particle FX component emitter.\nThe constant must be defined in the material assigned to the emitter.\nSetting a constant through this function will override the value set for that constant in the material.\nThe value will be overridden until particlefx.reset_constant is called.\nWhich particle FX to set a constant for is identified by the URL.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the particle FX that should have a constant set",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "emitter",
          "doc": "the id of the emitter",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "constant",
          "doc": "the name of the constant",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "value",
          "doc": "the value of the constant",
          "types": [
            "vector4"
          ]
        }
      ],
      "examples": "The following examples assumes that the particle FX has id \"particlefx\", it\ncontains an emitter with the id \"emitter\" and that the default-material in builtins is used, which defines the constant \"tint\".\nIf you assign a custom material to the sprite, you can reset the constants defined there in the same manner.\nHow to tint particles from an emitter red:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">set_constant</span><span class=\"p\">(</span><span class=\"s2\">&quot;#particlefx&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;emitter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tint&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "particlefx.reset_constant",
      "brief": "reset a shader constant for a particle FX component emitter",
      "description": "Resets a shader constant for a particle FX component emitter.\nThe constant must be defined in the material assigned to the emitter.\nResetting a constant through this function implies that the value defined in the material will be used.\nWhich particle FX to reset a constant for is identified by the URL.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the particle FX that should have a constant reset",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "emitter",
          "doc": "the id of the emitter",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "constant",
          "doc": "the name of the constant",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "The following examples assumes that the particle FX has id \"particlefx\", it\ncontains an emitter with the id \"emitter\" and that the default-material in builtins is used, which defines the constant \"tint\".\nIf you assign a custom material to the sprite, you can reset the constants defined there in the same manner.\nHow to reset the tinting of particles from an emitter:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">reset_constant</span><span class=\"p\">(</span><span class=\"s2\">&quot;#particlefx&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;emitter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tint&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "particlefx",
    "name": "Particle effects",
    "brief": "Particle effects API documentation",
    "description": "Functions for controlling particle effect component playback and\nshader constants.",
    "path": "",
    "file": "",
    "notes": [],
    "group": "COMPONENTS"
  }
}
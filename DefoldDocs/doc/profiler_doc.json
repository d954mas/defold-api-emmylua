{
  "elements": [
    {
      "type": "FUNCTION",
      "name": "profiler.get_memory_usage",
      "brief": "get current memory usage for app reported by OS",
      "description": "Get the amount of memory used (resident/working set) by the application in bytes, as reported by the OS.\n<span class=\"icon-attention\"></span> This function is not available on <span class=\"icon-html5\"></span> HTML5.\nThe values are gathered from internal OS functions which correspond to the following;\n<table>\n<thead>\n<tr>\n<th>OS</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"icon-ios\"></span> iOS<br/><span class=\"icon-macos\"></span> MacOS<br/><span class=\"icon-android\"></span><br/>Androd<br/><span class=\"icon-linux\"></span> Linux</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Resident_set_size\">Resident memory</a></td>\n</tr>\n<tr>\n<td><span class=\"icon-windows\"></span> Windows</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Working_set\">Working set</a></td>\n</tr>\n<tr>\n<td><span class=\"icon-html5\"></span> HTML5</td>\n<td><span class=\"icon-attention\"></span> Not available</td>\n</tr>\n</tbody>\n</table>",
      "returnvalues": [
        {
          "name": "bytes",
          "doc": "used by the application",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [],
      "examples": "Get memory usage before and after loading a collection:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">get_memory_usage</span><span class=\"p\">())</span>\n<span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collectionproxy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;load&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">get_memory_usage</span><span class=\"p\">())</span> <span class=\"c1\">-- will report a higher number than the initial call</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.get_cpu_usage",
      "brief": "get current CPU usage for app reported by OS",
      "description": "Get the percent of CPU usage by the application, as reported by the OS.\n<span class=\"icon-attention\"></span> This function is not available on <span class=\"icon-html5\"></span> HTML5.\nFor some platforms (<span class=\"icon-android\"></span> Android, <span class=\"icon-linux\"></span> Linux and <span class=\"icon-windows\"></span> Windows), this information is only available\nby default in the debug version of the engine. It can be enabled in release version as well\nby checking <code>track_cpu</code> under <code>profiler</code> in the <code>game.project</code> file.\n(This means that the engine will sample the CPU usage in intervalls during execution even in release mode.)",
      "returnvalues": [
        {
          "name": "percent",
          "doc": "of CPU used by the application",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.enable_ui",
      "brief": "enables or disables the on-screen profiler ui",
      "description": "Creates and shows or hides and destroys the on-sceen profiler ui\nThe profiler is a real-time tool that shows the numbers of milliseconds spent\nin each scope per frame as well as counters. The profiler is very useful for\ntracking down performance and resource problems.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "enabled",
          "doc": "true to enable, false to disable",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Show the profiler UI</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">enable_ui</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.set_ui_mode",
      "brief": "sets the the on-screen profiler ui mode",
      "description": "Set the on-screen profile mode - run, pause, record or show peak frame",
      "returnvalues": [],
      "parameters": [
        {
          "name": "mode",
          "doc": "the mode to set the ui profiler in\n<ul>\n<li><code>profiler.MODE_RUN</code> This is default mode that continously shows the last frame</li>\n<li><code>profiler.MODE_PAUSE</code> Pauses on the currently displayed frame</li>\n<li><code>profiler.MODE_SHOW_PEAK_FRAME</code> Pauses on the currently displayed frame but shows a new frame if that frame is slower</li>\n<li><code>profiler.MODE_RECORD</code> Records all incoming frames to the recording buffer</li>\n</ul>\nTo stop recording, switch to a different mode such as <code>MODE_PAUSE</code> or <code>MODE_RUN</code>.\nYou can also use the <code>view_recorded_frame</code> function to display a recorded frame. Doing so stops the recording as well.\nEvery time you switch to recording mode the recording buffer is cleared.\nThe recording buffer is also cleared when setting the <code>MODE_SHOW_PEAK_FRAME</code> mode.",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">start_recording</span><span class=\"p\">()</span>\n     <span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">set_ui_mode</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">MODE_RECORD</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">stop_recording</span><span class=\"p\">()</span>\n     <span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">set_ui_mode</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">MODE_PAUSE</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.set_ui_view_mode",
      "brief": "sets the the on-screen profiler ui view mode",
      "description": "Set the on-screen profile view mode - minimized or expanded",
      "returnvalues": [],
      "parameters": [
        {
          "name": "mode",
          "doc": "the view mode to set the ui profiler in\n<ul>\n<li><code>profiler.VIEW_MODE_FULL</code> The default mode which displays all the ui profiler details</li>\n<li><code>profiler.VIEW_MODE_MINIMIZED</code> Minimized mode which only shows the top header (fps counters and ui profiler mode)</li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Minimize the profiler view</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">set_ui_view_mode</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">VIEW_MODE_MINIMIZED</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.set_ui_vsync_wait_visible",
      "brief": "Shows or hides the vsync wait time in the on-screen profiler ui",
      "description": "Shows or hides the time the engine waits for vsync in the on-screen profiler\nEach frame the engine waits for vsync and depending on your vsync settings and how much time\nyour game logic takes this time can dwarf the time in the game logic making it hard to\nsee details in the on-screen profiler graph and lists.\nAlso, by hiding this the FPS times in the header show the time spent each time excuding the\ntime spent waiting for vsync. This shows you how long time your game is spending actively\nworking each frame.\nThis setting also effects the display of recorded frames but does not affect the actual\nrecorded frames so it is possible to toggle this on and off when viewing recorded frames.\nBy default the vsync wait times is displayed in the profiler.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "visible",
          "doc": "true to include it in the display, false to hide it.",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Exclude frame wait time form the profiler ui</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">set_ui_vsync_wait_visible</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.recorded_frame_count",
      "brief": "get the number of recorded frames in the on-screen profiler ui",
      "description": "Get the number of recorded frames in the on-screen profiler ui recording buffer",
      "returnvalues": [
        {
          "name": "frame_count",
          "doc": "the number of recorded frames, zero if on-screen profiler is disabled",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Show the last recorded frame</span>\n<span class=\"kd\">local</span> <span class=\"n\">recorded_frame_count</span> <span class=\"o\">=</span> <span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">recorded_frame_count</span><span class=\"p\">()</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">view_recorded_frame</span><span class=\"p\">(</span><span class=\"n\">recorded_frame_count</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.view_recorded_frame",
      "brief": "displays a previously recorded frame in the on-screen profiler ui",
      "description": "Pauses and displays a frame from the recording buffer in the on-screen profiler ui\nThe frame to show can either be an absolute frame or a relative frame to the current frame.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "frame_index",
          "doc": "a table where you specify one of the following parameters:\n<ul>\n<li><code>distance</code> The offset from the currently displayed frame (this is truncated between zero and the number of recorded frames)</li>\n<li><code>frame</code> The frame index in the recording buffer (1 is first recorded frame)</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Go back one frame</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">view_recorded_frame</span><span class=\"p\">({</span><span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.log_text",
      "brief": "send a text to the profiler",
      "description": "Send a text to the profiler",
      "returnvalues": [],
      "parameters": [
        {
          "name": "text",
          "doc": "the string to send to the profiler",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">log_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Event: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "profiler.scope_begin",
      "brief": "start a profile scope",
      "description": "Starts a profile scope.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "name",
          "doc": "The name of the scope",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Go back one frame</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">scope_begin</span><span class=\"p\">(</span><span class=\"s2\">&quot;test_function&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">test_function</span><span class=\"p\">()</span>\n<span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">scope_end</span><span class=\"p\">()</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Must be correctly matched with a corresponding call to `profiler.scope_end()`"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "profiler.scope_end",
      "brief": "end the current profile scope",
      "description": "End the current profile scope.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "profiler.MODE_RUN",
      "brief": "continously show latest frame",
      "description": "continously show latest frame",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "profiler.MODE_PAUSE",
      "brief": "pause on current frame",
      "description": "pause on current frame",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "profiler.MODE_SHOW_PEAK_FRAME",
      "brief": "pause at peak frame",
      "description": "pause at peak frame",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "profiler.MODE_RECORD",
      "brief": "start recording",
      "description": "start recording",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "profiler.VIEW_MODE_FULL",
      "brief": "show full profiler ui",
      "description": "show full profiler ui",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "profiler.VIEW_MODE_MINIMIZED",
      "brief": "show mimimal profiler ui",
      "description": "show mimimal profiler ui",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "profiler",
    "name": "Profiler",
    "brief": "Profiler API documentation",
    "description": "Functions for getting profiling data in runtime.\nMore detailed <a href=\"https://www.defold.com/manuals/profiling/\">profiling</a> and <a href=\"http://www.defold.com/manuals/debugging/\">debugging</a> information available in the manuals.",
    "path": "",
    "file": "",
    "notes": [],
    "group": "SYSTEM"
  }
}
{
  "elements": [
    {
      "type": "FUNCTION",
      "name": "GuiNodeTypeDestroyFunction",
      "brief": "",
      "description": "",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GuiNodeTypeDestroyFunction",
      "brief": "",
      "description": "",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "DM_DECLARE_COMPGUI_TYPE",
      "brief": "Registers a new gui node type to the Gui component",
      "description": "Registers a new gui node type to the Gui component",
      "returnvalues": [],
      "parameters": [
        {
          "name": "symbol",
          "doc": "The unique C++ symbol name",
          "types": [
            "C++ symbol name"
          ]
        },
        {
          "name": "name",
          "doc": "The name of the node type",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "type_create_fn",
          "doc": "the create function",
          "types": [
            "GuiNodeTypeCreateFunction"
          ]
        },
        {
          "name": "type_destroy_fn",
          "doc": "the destroy function. May be 0",
          "types": [
            "GuiNodeTypeDestroyFunction"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "HComponentRenderConstants",
      "brief": "Render constants handle",
      "description": "Render constants handle",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "CreateRenderConstants",
      "brief": "Create a new HComponentRenderConstants container",
      "description": "Create a new HComponentRenderConstants container",
      "returnvalues": [
        {
          "name": "constants",
          "doc": "",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "DestroyRenderConstants",
      "brief": "Destroys a render constants container",
      "description": "Destroys a render constants container",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constants",
          "doc": "(must not be 0)",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetRenderConstant",
      "brief": "Destroys a render constants container",
      "description": "Destroys a render constants container",
      "returnvalues": [
        {
          "name": "result",
          "doc": "returns true if the constant exists",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the hashed name of the property",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "out_constant",
          "doc": "the pointer where to store the constant",
          "types": [
            "dmRender::Constant**"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetRenderConstantCount",
      "brief": "Get the number of render constants",
      "description": "Get the number of render constants",
      "returnvalues": [
        {
          "name": "size",
          "doc": "returns the number of set constants",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetRenderConstant",
      "brief": "Get a render constant by index",
      "description": "Get a render constant by index",
      "returnvalues": [
        {
          "name": "constant",
          "doc": "the pointer where to store the constant",
          "types": [
            "dmRender::HConstant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        },
        {
          "name": "index",
          "doc": "the index",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetRenderConstant",
      "brief": "Set a render constant by name. The constant must e...",
      "description": "Set a render constant by name. The constant must exist in the material",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constants",
          "doc": "the render constants buffer",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        },
        {
          "name": "material",
          "doc": "the material to get default values from if constant didn't already exist in the render constants buffer",
          "types": [
            "dmRender::HMaterial"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the hashed name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "value_index",
          "doc": "index of the constant value to set, if the constant is an array",
          "types": [
            "uint32_t"
          ]
        },
        {
          "name": "element_index",
          "doc": "pointer to the index of the element (in range [0,3]). May be 0",
          "types": [
            "uint32_t*"
          ]
        },
        {
          "name": "var",
          "doc": "the constant value",
          "types": [
            "const dmGameObject::PropertyVar&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetRenderConstant",
      "brief": "Set a render constant by name. The constant must e...",
      "description": "Set a render constant by name. The constant must exist in the material",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the hashed name of the constant",
          "types": [
            "dmhash_t"
          ]
        },
        {
          "name": "values",
          "doc": "the values",
          "types": [
            "dmVMath::Vector4*"
          ]
        },
        {
          "name": "num_values",
          "doc": "number of values in the array",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ClearRenderConstant",
      "brief": "Removes a render constant from the container",
      "description": "Removes a render constant from the container",
      "returnvalues": [
        {
          "name": "result",
          "doc": "non zero if the constant was removed",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        },
        {
          "name": "name_hash",
          "doc": "the hashed name of the constant",
          "types": [
            "dmhash_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "HashRenderConstants",
      "brief": "Hashes the constants",
      "description": "Hashes the constants",
      "returnvalues": [],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        },
        {
          "name": "state",
          "doc": "the hash state to update",
          "types": [
            "HashState32*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Also updates the internal state of the constants container. After a call to this function, the `AreRenderConstantsUpdated` will always return false."
      ]
    },
    {
      "type": "FUNCTION",
      "name": "AreRenderConstantsUpdated",
      "brief": "check if the constants have changed",
      "description": "check if the constants have changed",
      "returnvalues": [
        {
          "name": "result",
          "doc": "non zero if the constants were changed",
          "types": [
            "int"
          ]
        }
      ],
      "parameters": [
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "EnableRenderObjectConstants",
      "brief": "set the constants of a render object",
      "description": "set the constants of a render object",
      "returnvalues": [],
      "parameters": [
        {
          "name": "ro",
          "doc": "the render object",
          "types": [
            "dmRender::RenderObject*"
          ]
        },
        {
          "name": "constants",
          "doc": "the constants",
          "types": [
            "dmGameSystem::HComponentRenderConstants"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "CompGetConstantCallback",
      "brief": "Used in GetMaterialConstant to resolve a render co...",
      "description": "Used in GetMaterialConstant to resolve a render constant's value",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "CompSetConstantCallback",
      "brief": "Used in SetMaterialConstant to set a render consta...",
      "description": "Used in SetMaterialConstant to set a render constant's value",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmGameSystem",
    "name": "Component Render Constants",
    "brief": "Component render constant API documentation",
    "description": "<span class=\"file\"><dmsdk/gamesystem/render_constants.h></span>\nApi for setting and updating component render constants",
    "path": "",
    "file": "",
    "notes": []
  }
}
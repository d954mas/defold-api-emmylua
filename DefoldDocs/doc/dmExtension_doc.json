{
  "elements": [
    {
      "type": "ENUM",
      "name": "dmExtension::Result",
      "brief": "result enumeration",
      "description": "Result enumeration.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmExtension::RESULT_OK",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmExtension::RESULT_INIT_ERROR",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "dmExtension::AppParams",
      "brief": "application level callback data",
      "description": "Extension application entry callback data.\nThis is the data structure passed as parameter by extension Application entry callbacks (AppInit and AppFinalize) functions",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_ConfigFile",
          "doc": "",
          "type": "dmConfigFile::HConfig"
        },
        {
          "name": "m_WebServer",
          "doc": "Only valid in debug builds, where the engine service is running. 0 otherwise.",
          "type": "dmWebServer::HServer"
        }
      ],
      "notes": [
        "This struct is kept as-is for backwards compatibility. In practice, the struct passed to the callbacks is of the type dmEngine::ExtensionAppParams"
      ]
    },
    {
      "type": "STRUCT",
      "name": "dmExtension::Params",
      "brief": "extension level callback data",
      "description": "Extension callback data.\nThis is the data structure passed as parameter by extension callbacks (Init, Finalize, Update, OnEvent)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_ConfigFile",
          "doc": "",
          "type": "dmConfigFile::HConfig"
        },
        {
          "name": "m_L",
          "doc": "",
          "type": "lua_State*"
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "dmExtension::EventID",
      "brief": "event id enumeration",
      "description": "Event id enumeration.\nEVENT_ID_ICONIFYAPP and EVENT_ID_DEICONIFYAPP only available on <span class=\"icon-osx\"></span> <span class=\"icon-windows\"></span> <span class=\"icon-linux\"></span>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmExtension::EVENT_ID_ACTIVATEAPP",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmExtension::EVENT_ID_DEACTIVATEAPP",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmExtension::EVENT_ID_ICONIFYAPP",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmExtension::EVENT_ID_DEICONIFYAPP",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "dmExtension::CallbackType",
      "brief": "extra callback enumeration",
      "description": "Extra callback enumeration for RegisterCallback function.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmExtension::CALLBACK_PRE_RENDER",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmExtension::CALLBACK_POST_RENDER",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "dmExtension::Event",
      "brief": "event callback data",
      "description": "Extension event callback data.\nThis is the data structure passed as parameter by extension event callbacks (OnEvent)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_Event",
          "doc": "",
          "type": "dmExtension::EventID"
        }
      ],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "extension_callback_t",
      "brief": "Extra extension callback typedef",
      "description": "Callback typedef for functions passed to RegisterCallback().",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "params",
          "doc": "",
          "types": [
            "Params"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RegisterCallback",
      "brief": "Register extra extension callbacks.",
      "description": "Register extra extension callbacks.",
      "returnvalues": [
        {
          "name": "",
          "doc": "Returns true if successfully registered the function, false otherwise.",
          "types": [
            "bool"
          ]
        }
      ],
      "parameters": [
        {
          "name": "callback_type",
          "doc": "Callback type enum",
          "types": [
            "CallbackType"
          ]
        },
        {
          "name": "func",
          "doc": "Function to register as callback",
          "types": [
            "extension_callback_t"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Can only be called within the AppInit function for an extension."
      ]
    },
    {
      "type": "MACRO",
      "name": "DM_DECLARE_EXTENSION",
      "brief": "declare a new extension",
      "description": "Declare and register new extension to the engine.\nThis macro is used to declare the extension callback functions used by the engine to communicate with the extension.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "symbol",
          "doc": "external extension symbol description (no quotes).",
          "types": [
            "symbol"
          ]
        },
        {
          "name": "name",
          "doc": "extension name. Human readable.",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "appinit",
          "doc": "app-init function. May be null.\n<dl>\n<dt><code>app_params</code></dt>\n<dd><span class=\"type\">dmExtension::AppParams*</span> Pointer to an <code>AppParams</code> structure.</dd>\n</dl>",
          "types": [
            "function(dmExtension::AppParams* app_params)"
          ]
        },
        {
          "name": "appfinal",
          "doc": "app-final function. May be null.\n<dl>\n<dt><code>app_params</code></dt>\n<dd><span class=\"type\">dmExtension::AppParams*</span> Pointer to an <code>AppParams</code> structure.</dd>\n</dl>",
          "types": [
            "function(dmExtension::AppParams* app_params)"
          ]
        },
        {
          "name": "init",
          "doc": "init function. May not be null.\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to a <code>Params</code> structure</dd>\n</dl>",
          "types": [
            "function(dmExtension::Params* params)"
          ]
        },
        {
          "name": "update",
          "doc": "update function. May be null.\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to a <code>Params</code> structure</dd>\n</dl>",
          "types": [
            "function(dmExtension::Params* params)"
          ]
        },
        {
          "name": "on_event",
          "doc": "event callback function. May be null.\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to a <code>Params</code> structure</dd>\n<dt><code>event</code></dt>\n<dd><span class=\"type\">dmExtension::Event*</span> const Pointer to an <code>Event</code> structure</dd>\n</dl>",
          "types": [
            "function(dmExtension::Params* params, const dmExtension::Event* event)"
          ]
        },
        {
          "name": "final",
          "doc": "function. May not be null.\n<dl>\n<dt><code>params</code></dt>\n<dd><span class=\"type\">dmExtension::Params*</span> Pointer to an <code>Params</code> structure.</dd>\n</dl>",
          "types": [
            "function(dmExtension::Params* params)"
          ]
        }
      ],
      "examples": "Register a new extension:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_DECLARE_EXTENSION</span><span class=\"p\">(</span><span class=\"n\">MyExt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;MyExt&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AppInitializeMyExt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AppFinalizeMyExt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">InitializeMyExt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UpdateMyExt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OnEventMyExt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FinalizeMyExt</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "RegisteriOSUIApplicationDelegate",
      "brief": "Register application delegate",
      "description": "Register an iOS application delegate to the engine. Multiple delegates are supported (Max 32)",
      "returnvalues": [],
      "parameters": [
        {
          "name": "delegate",
          "doc": "An UIApplicationDelegate, see: https://developer.apple.com/documentation/uikit/uiapplicationdelegate?language=objc",
          "types": [
            "id<UIApplicationDelegate>"
          ]
        }
      ],
      "examples": "```objective-c\n// myextension_ios.mm\nid<UIApplicationDelegate> g_MyApplicationDelegate;",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Note that the delegate needs to be registered before the UIApplicationMain in order to\nhandle any earlier callbacks.\n\nThis function is only available on iOS. [icon:ios]"
      ]
    },
    {
      "type": "FUNCTION",
      "name": "UnregisteriOSUIApplicationDelegate",
      "brief": "Unregister an application delegate",
      "description": "Deregister a previously registered iOS application delegate\nThis function is only available on iOS. <span class=\"icon-ios\"></span>",
      "returnvalues": [],
      "parameters": [
        {
          "name": "delegate",
          "doc": "an id<UIApplicationDelegate>",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_PLATFORM_IOS",
      "brief": "Set if the platform is iPhoneOS <span class=\"icon-ios\"></span>",
      "description": "Set if the platform is iPhoneOS <span class=\"icon-ios\"></span>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_PLATFORM_ANDROID",
      "brief": "Set if the platform is Android <span class=\"icon-android\"></span>",
      "description": "Set if the platform is Android <span class=\"icon-android\"></span>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_PLATFORM_HTML5",
      "brief": "Set if the platform is Html5 <span class=\"icon-html5\"></span>",
      "description": "Set if the platform is Html5 <span class=\"icon-html5\"></span>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_PLATFORM_OSX",
      "brief": "Set if the platform is OSX <span class=\"icon-macos\"></span>",
      "description": "Set if the platform is OSX <span class=\"icon-macos\"></span>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_PLATFORM_LINUX",
      "brief": "Set if the platform is Linux <span class=\"icon-linux\"></span>",
      "description": "Set if the platform is Linux <span class=\"icon-linux\"></span>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MACRO",
      "name": "DM_PLATFORM_WINDOWS",
      "brief": "Set if the platform is Windows <span class=\"icon-windows\"></span> (on both x86 and x86_64)",
      "description": "Set if the platform is Windows <span class=\"icon-windows\"></span> (on both x86 and x86_64)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmExtension",
    "name": "Extension",
    "brief": "SDK Extension API documentation",
    "description": "Functions for creating and controlling engine native extension libraries.",
    "path": "engine/dlib/src/dmsdk/extension/extension.h",
    "file": "dmsdk/extension/extension.h",
    "notes": [],
    "group": "DEFOLD SDK"
  }
}
{
  "elements": [
    {
      "type": "PROPERTY",
      "name": "material",
      "brief": "<span class=\"type\">hash</span> gui material",
      "description": "The material used when rendering the gui. The type of the property is hash.",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to set material using a script property (see <a href=\"/ref/resource#resource.material\">resource.material</a>)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;desaturate_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;/desaturate.material&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;material&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">desaturate_material</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "textures",
      "brief": "<span class=\"type\">hash</span> gui textures",
      "description": "The textures used in the gui. The type of the property is hash.\nKey must be specified in options table.",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to set texture using a script property (see <a href=\"/ref/resource#resource.atlas\">resource.atlas</a>)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;cards_red&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/cards_red.atlas&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;cards_blue&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/cards_blue.atlas&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;textures&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">cards_red</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cards&quot;</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "fonts",
      "brief": "<span class=\"type\">hash</span> gui fonts",
      "description": "The fonts used in the gui. The type of the property is hash.\nKey must be specified in options table.",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to set font using a script property (see <a href=\"/ref/resource#resource.font\">resource.font</a>)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;title_latin&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;/open_sans.font&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;title_cyrillic&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;/open_sans_cyrillic.font&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fonts&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title_cyrillic</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_node",
      "brief": "gets the node with the specified id",
      "description": "Retrieves the node with the specified id.",
      "returnvalues": [
        {
          "name": "instance",
          "doc": "a new node instance",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "id",
          "doc": "id of the node to retrieve",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "Gets a node by id and change its color:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">red</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_id",
      "brief": "gets the id of the specified node",
      "description": "Retrieves the id of the specified node.",
      "returnvalues": [
        {
          "name": "id",
          "doc": "the id of the node",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "the node to retrieve the id from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "Gets the id of a node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; hash: [my_node]</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_id",
      "brief": "sets the id of the specified node",
      "description": "Set the id of the specicied node to a new value.\nNodes created with the gui.new_*_node() functions get\nan empty id. This function allows you to give dynamically\ncreated nodes an id.\n<span class=\"icon-attention\"></span> No checking is done on the uniqueness of supplied ids.\nIt is up to you to make sure you use unique ids.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the id for",
          "types": [
            "node"
          ]
        },
        {
          "name": "id",
          "doc": "id to set",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "Create a new node and set its id:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_id</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_new_node&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_index",
      "brief": "gets the index of the specified node",
      "description": "Retrieve the index of the specified node among its siblings.\nThe index defines the order in which a node appear in a GUI scene.\nHigher index means the node is drawn on top of lower indexed nodes.",
      "returnvalues": [
        {
          "name": "index",
          "doc": "the index of the node",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "the node to retrieve the id from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "Compare the index order of two sibling nodes:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node1</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node_1&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node2</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node_2&quot;</span><span class=\"p\">)</span>\n\n<span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_index</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_index</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- node1 is drawn below node2</span>\n<span class=\"kr\">else</span>\n    <span class=\"c1\">-- node2 is drawn below node1</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.delete_node",
      "brief": "deletes a node",
      "description": "Deletes the specified node. Any child nodes of the specified node will be\nrecursively deleted.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to delete",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "Delete a particular node and any child nodes it might have:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">delete_node</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PLAYBACK_ONCE_FORWARD",
      "brief": "once forward",
      "description": "once forward",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PLAYBACK_ONCE_BACKWARD",
      "brief": "once backward",
      "description": "once backward",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PLAYBACK_ONCE_PINGPONG",
      "brief": "once forward and then backward",
      "description": "once forward and then backward",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PLAYBACK_LOOP_FORWARD",
      "brief": "loop forward",
      "description": "loop forward",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PLAYBACK_LOOP_BACKWARD",
      "brief": "loop backward",
      "description": "loop backward",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PLAYBACK_LOOP_PINGPONG",
      "brief": "ping pong loop",
      "description": "ping pong loop",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_LINEAR",
      "brief": "linear interpolation",
      "description": "linear interpolation",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INQUAD",
      "brief": "in-quadratic",
      "description": "in-quadratic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTQUAD",
      "brief": "out-quadratic",
      "description": "out-quadratic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTQUAD",
      "brief": "in-out-quadratic",
      "description": "in-out-quadratic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINQUAD",
      "brief": "out-in-quadratic",
      "description": "out-in-quadratic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INCUBIC",
      "brief": "in-cubic",
      "description": "in-cubic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTCUBIC",
      "brief": "out-cubic",
      "description": "out-cubic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTCUBIC",
      "brief": "in-out-cubic",
      "description": "in-out-cubic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINCUBIC",
      "brief": "out-in-cubic",
      "description": "out-in-cubic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INQUART",
      "brief": "in-quartic",
      "description": "in-quartic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTQUART",
      "brief": "out-quartic",
      "description": "out-quartic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTQUART",
      "brief": "in-out-quartic",
      "description": "in-out-quartic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINQUART",
      "brief": "out-in-quartic",
      "description": "out-in-quartic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INQUINT",
      "brief": "in-quintic",
      "description": "in-quintic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTQUINT",
      "brief": "out-quintic",
      "description": "out-quintic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTQUINT",
      "brief": "in-out-quintic",
      "description": "in-out-quintic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINQUINT",
      "brief": "out-in-quintic",
      "description": "out-in-quintic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INSINE",
      "brief": "in-sine",
      "description": "in-sine",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTSINE",
      "brief": "out-sine",
      "description": "out-sine",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTSINE",
      "brief": "in-out-sine",
      "description": "in-out-sine",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINSINE",
      "brief": "out-in-sine",
      "description": "out-in-sine",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INEXPO",
      "brief": "in-exponential",
      "description": "in-exponential",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTEXPO",
      "brief": "out-exponential",
      "description": "out-exponential",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTEXPO",
      "brief": "in-out-exponential",
      "description": "in-out-exponential",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINEXPO",
      "brief": "out-in-exponential",
      "description": "out-in-exponential",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INCIRC",
      "brief": "in-circlic",
      "description": "in-circlic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTCIRC",
      "brief": "out-circlic",
      "description": "out-circlic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTCIRC",
      "brief": "in-out-circlic",
      "description": "in-out-circlic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINCIRC",
      "brief": "out-in-circlic",
      "description": "out-in-circlic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INELASTIC",
      "brief": "in-elastic",
      "description": "in-elastic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTELASTIC",
      "brief": "out-elastic",
      "description": "out-elastic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTELASTIC",
      "brief": "in-out-elastic",
      "description": "in-out-elastic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINELASTIC",
      "brief": "out-in-elastic",
      "description": "out-in-elastic",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INBACK",
      "brief": "in-back",
      "description": "in-back",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTBACK",
      "brief": "out-back",
      "description": "out-back",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTBACK",
      "brief": "in-out-back",
      "description": "in-out-back",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINBACK",
      "brief": "out-in-back",
      "description": "out-in-back",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INBOUNCE",
      "brief": "in-bounce",
      "description": "in-bounce",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTBOUNCE",
      "brief": "out-bounce",
      "description": "out-bounce",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_INOUTBOUNCE",
      "brief": "in-out-bounce",
      "description": "in-out-bounce",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.EASING_OUTINBOUNCE",
      "brief": "out-in-bounce",
      "description": "out-in-bounce",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.animate",
      "brief": "animates a node property",
      "description": "This starts an animation of a node property according to the specified parameters.\nIf the node property is already being animated, that animation will be canceled and\nreplaced by the new one. Note however that several different node properties\ncan be animated simultaneously. Use <code>gui.cancel_animation</code> to stop the animation\nbefore it has completed.\nComposite properties of type vector3, vector4 or quaternion\nalso expose their sub-components (x, y, z and w).\nYou can address the components individually by suffixing the name with a dot '.'\nand the name of the component.\nFor instance, <code>\"position.x\"</code> (the position x coordinate) or <code>\"color.w\"</code>\n(the color alpha value).\nIf a <code>complete_function</code> (Lua function) is specified, that function will be called\nwhen the animation has completed.\nBy starting a new animation in that function, several animations can be sequenced\ntogether. See the examples below for more information.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to animate",
          "types": [
            "node"
          ]
        },
        {
          "name": "property",
          "doc": "property to animate\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>\nThe following property constants are defined equaling the corresponding property string names.\n<ul>\n<li><code>gui.PROP_POSITION</code></li>\n<li><code>gui.PROP_ROTATION</code></li>\n<li><code>gui.PROP_SCALE</code></li>\n<li><code>gui.PROP_COLOR</code></li>\n<li><code>gui.PROP_OUTLINE</code></li>\n<li><code>gui.PROP_SHADOW</code></li>\n<li><code>gui.PROP_SIZE</code></li>\n<li><code>gui.PROP_FILL_ANGLE</code></li>\n<li><code>gui.PROP_INNER_RADIUS</code></li>\n<li><code>gui.PROP_SLICE9</code></li>\n</ul>",
          "types": [
            "string",
            "constant"
          ]
        },
        {
          "name": "to",
          "doc": "target property value",
          "types": [
            "number",
            "vector3",
            "vector4",
            "quaternion"
          ]
        },
        {
          "name": "easing",
          "doc": "easing to use during animation.\n     Either specify one of the <code>gui.EASING_*</code> constants or provide a\n     <span class=\"type\">vector</span> with a custom curve. See the <a href=\"/manuals/animation#_easing\">animation guide</a> for more information.",
          "types": [
            "constant",
            "vector"
          ]
        },
        {
          "name": "duration",
          "doc": "duration of the animation in seconds.",
          "types": [
            "number"
          ]
        },
        {
          "name": "[delay]",
          "doc": "delay before the animation starts in seconds.",
          "types": [
            "number"
          ]
        },
        {
          "name": "[complete_function]",
          "doc": "function to call when the\n     animation has completed",
          "types": [
            "function(self, node)"
          ]
        },
        {
          "name": "[playback]",
          "doc": "playback mode\n<ul>\n<li><code>gui.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>gui.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "How to start a simple color animation, where the node fades in to white during 0.5 seconds:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"c1\">-- node is fully transparent</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"c1\">-- start animation</span>\n</code></pre></div>\n\nHow to start a sequenced animation where the node fades in to white during 0.5 seconds, stays visible for 2 seconds and then fades out:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_animation_done</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fade out node, but wait 2 seconds before the animation starts</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_OUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fetch the node we want to animate</span>\n    <span class=\"kd\">local</span> <span class=\"n\">my_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- node is initially set to fully transparent</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">my_node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"c1\">-- animate the node immediately and call on_animation_done when the animation has completed</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">my_node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">on_animation_done</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nHow to animate a node's y position using a crazy custom easing curve:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n    <span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position.y&quot;</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_PINGPONG</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.cancel_animation",
      "brief": "cancels an ongoing animation",
      "description": "If an animation of the specified node is currently running (started by <code>gui.animate</code>), it will immediately be canceled.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node that should have its animation canceled",
          "types": [
            "node"
          ]
        },
        {
          "name": "property",
          "doc": "property for which the animation should be canceled\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>",
          "types": [
            "string",
            "constant"
          ]
        }
      ],
      "examples": "Start an animation of the position property of a node, then cancel parts of\nthe animation:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- animate to new position</span>\n<span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"c1\">-- cancel animation of the x component.</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">cancel_animation</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position.x&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.new_box_node",
      "brief": "creates a new box node",
      "description": "Dynamically create a new box node.",
      "returnvalues": [
        {
          "name": "node",
          "doc": "new box node",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "pos",
          "doc": "node position",
          "types": [
            "vector3",
            "vector4"
          ]
        },
        {
          "name": "size",
          "doc": "node size",
          "types": [
            "vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.new_text_node",
      "brief": "creates a new text node",
      "description": "Dynamically create a new text node.",
      "returnvalues": [
        {
          "name": "node",
          "doc": "new text node",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "pos",
          "doc": "node position",
          "types": [
            "vector3",
            "vector4"
          ]
        },
        {
          "name": "text",
          "doc": "node text",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.new_pie_node",
      "brief": "creates a new pie node",
      "description": "Dynamically create a new pie node.",
      "returnvalues": [
        {
          "name": "node",
          "doc": "new pie node",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "pos",
          "doc": "node position",
          "types": [
            "vector3",
            "vector4"
          ]
        },
        {
          "name": "size",
          "doc": "node size",
          "types": [
            "vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_text",
      "brief": "gets the node text",
      "description": "Returns the text value of a text node. This is only useful for text nodes.",
      "returnvalues": [
        {
          "name": "text",
          "doc": "text value",
          "types": [
            "string"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the text",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_text",
      "brief": "sets the node text",
      "description": "Set the text value of a text node. This is only useful for text nodes.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set text for",
          "types": [
            "node"
          ]
        },
        {
          "name": "text",
          "doc": "text to set",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_line_break",
      "brief": "get line-break mode",
      "description": "Returns whether a text node is in line-break mode or not.\nThis is only useful for text nodes.",
      "returnvalues": [
        {
          "name": "line_break",
          "doc": "<code>true</code> or <code>false</code>",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the line-break for",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_line_break",
      "brief": "set line-break mode",
      "description": "Sets the line-break mode on a text node.\nThis is only useful for text nodes.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set line-break for",
          "types": [
            "node"
          ]
        },
        {
          "name": "line_break",
          "doc": "true or false",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_blend_mode",
      "brief": "gets the node blend mode",
      "description": "Returns the blend mode of a node.\nBlend mode defines how the node will be blended with the background.",
      "returnvalues": [
        {
          "name": "blend_mode",
          "doc": "blend mode\n<ul>\n<li><code>gui.BLEND_ALPHA</code></li>\n<li><code>gui.BLEND_ADD</code></li>\n<li><code>gui.BLEND_ADD_ALPHA</code></li>\n<li><code>gui.BLEND_MULT</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the blend mode",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_blend_mode",
      "brief": "sets node blend mode",
      "description": "Set the blend mode of a node.\nBlend mode defines how the node will be blended with the background.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set blend mode for",
          "types": [
            "node"
          ]
        },
        {
          "name": "blend_mode",
          "doc": "blend mode to set\n<ul>\n<li><code>gui.BLEND_ALPHA</code></li>\n<li><code>gui.BLEND_ADD</code></li>\n<li><code>gui.BLEND_ADD_ALPHA</code></li>\n<li><code>gui.BLEND_MULT</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_texture",
      "brief": "gets node texture",
      "description": "Returns the texture of a node.\nThis is currently only useful for box or pie nodes.\nThe texture must be mapped to the gui scene in the gui editor.",
      "returnvalues": [
        {
          "name": "texture",
          "doc": "texture id",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get texture from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_texture",
      "brief": "sets the node texture",
      "description": "Set the texture on a box or pie node. The texture must be mapped to\nthe gui scene in the gui editor. The function points out which texture\nthe node should render from. If the texture is an atlas, further\ninformation is needed to select which image/animation in the atlas\nto render. In such cases, use <code>gui.play_flipbook()</code> in\naddition to this function.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set texture for",
          "types": [
            "node"
          ]
        },
        {
          "name": "texture",
          "doc": "texture id",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "To set a texture (or animation) from an atlas:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_atlas&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;image&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\nSet a dynamically created texture to a node. Note that there is only\none texture image in this case so <code>gui.set_texture()</code> is\nsufficient.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"c1\">-- A nice orange. String with the RGB values.</span>\n<span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n<span class=\"c1\">-- Create the texture. Repeat the color string for each pixel.</span>\n<span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_flipbook",
      "brief": "gets the node flipbook animation",
      "description": "Get node flipbook animation.",
      "returnvalues": [
        {
          "name": "animation",
          "doc": "animation id",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get flipbook animation from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.play_flipbook",
      "brief": "play node flipbook animation",
      "description": "Play flipbook animation on a box or pie node.\nThe current node texture must contain the animation.\nUse this function to set one-frame still images on the node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set animation for",
          "types": [
            "node"
          ]
        },
        {
          "name": "animation",
          "doc": "animation id",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "[complete_function]",
          "doc": "optional function to call when the animation has completed\n<dl>\n<dt><code>self</code></dt>\n<dd>\n<span class=\"type\">object</span> The current object.\n</dd>\n<dt><code>node</code></dt>\n<dd>\n<span class=\"type\">node</span> The node that is animated.\n</dd>\n</dl>",
          "types": [
            "function(self, node)"
          ]
        },
        {
          "name": "[play_properties]",
          "doc": "optional table with properties\n<dl>\n<dt><code>offset</code></dt>\n<dd><span class=\"type\">number</span> The normalized initial value of the animation cursor when the animation starts playing</dd>\n<dt><code>playback_rate</code></dt>\n<dd><span class=\"type\">number</span> The rate with which the animation will be played. Must be positive</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "Set the texture of a node to a flipbook animation from an atlas:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">anim_callback</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Take action after animation has played.</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Create a new node and set the texture to a flipbook animation</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;button_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gui_sprites&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;animated_button&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nSet the texture of a node to an image from an atlas:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Create a new node and set the texture to a &quot;button.png&quot; from atlas</span>\n<span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;button_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gui_sprites&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;button&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.cancel_flipbook",
      "brief": "cancel a node flipbook animation",
      "description": "Cancels any running flipbook animation on the specified node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node cancel flipbook animation for",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;anim_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">cancel_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.new_texture",
      "brief": "create new texture",
      "description": "Dynamically create a new texture.",
      "returnvalues": [
        {
          "name": "success",
          "doc": "texture creation was successful",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "code",
          "doc": "one of the gui.RESULT_* codes if unsuccessful",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "texture",
          "doc": "texture id",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "width",
          "doc": "texture width",
          "types": [
            "number"
          ]
        },
        {
          "name": "height",
          "doc": "texture height",
          "types": [
            "number"
          ]
        },
        {
          "name": "type",
          "doc": "texture type\n<ul>\n<li><code>\"rgb\"</code> - RGB</li></li>\n<li><code>\"rgba\"</code> - RGBA</li></li>\n<li><code>\"l\"</code> - LUMINANCE</li></li>\n</ul>",
          "types": [
            "string",
            "constant"
          ]
        },
        {
          "name": "buffer",
          "doc": "texture data",
          "types": [
            "string"
          ]
        },
        {
          "name": "flip",
          "doc": "flip texture vertically",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "How to create a texture and apply it to a new box node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n     <span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n     <span class=\"c1\">-- A nice orange. String with the RGB values.</span>\n     <span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n\n     <span class=\"c1\">-- Create the texture. Repeat the color string for each pixel.</span>\n     <span class=\"kd\">local</span> <span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">reason</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n     <span class=\"kr\">if</span> <span class=\"n\">ok</span> <span class=\"kr\">then</span>\n         <span class=\"c1\">-- Create a box node and apply the texture to it.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">)</span>\n     <span class=\"kr\">else</span>\n         <span class=\"c1\">-- Could not create texture for some reason...</span>\n         <span class=\"kr\">if</span> <span class=\"n\">reason</span> <span class=\"o\">==</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">RESULT_TEXTURE_ALREADY_EXISTS</span> <span class=\"kr\">then</span>\n             <span class=\"p\">...</span>\n         <span class=\"kr\">else</span>\n             <span class=\"p\">...</span>\n         <span class=\"kr\">end</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.delete_texture",
      "brief": "delete texture",
      "description": "Delete a dynamically created texture.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "texture",
          "doc": "texture id",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"c1\">-- Create a texture.</span>\n     <span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp_tx&quot;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\0</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n         <span class=\"c1\">-- Do something with the texture.</span>\n         <span class=\"p\">...</span>\n\n         <span class=\"c1\">-- Delete the texture</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">delete_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp_tx&quot;</span><span class=\"p\">)</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_texture_data",
      "brief": "set the buffer data for a texture",
      "description": "Set the texture buffer data for a dynamically created texture.",
      "returnvalues": [
        {
          "name": "success",
          "doc": "setting the data was successful",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "texture",
          "doc": "texture id",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "width",
          "doc": "texture width",
          "types": [
            "number"
          ]
        },
        {
          "name": "height",
          "doc": "texture height",
          "types": [
            "number"
          ]
        },
        {
          "name": "type",
          "doc": "texture type\n<ul>\n  <li><code>\"rgb\"</code> - RGB</li>\n  <li><code>\"rgba\"</code> - RGBA</li>\n  <li><code>\"l\"</code> - LUMINANCE</li>\n</ul>",
          "types": [
            "string",
            "constant"
          ]
        },
        {
          "name": "buffer",
          "doc": "texture data",
          "types": [
            "string"
          ]
        },
        {
          "name": "flip",
          "doc": "flip texture vertically",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n     <span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n     <span class=\"c1\">-- Create a dynamic texture, all white.</span>\n     <span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;dynamic_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">),</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n         <span class=\"c1\">-- Create a box node and apply the texture to it.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dynamic_tx&quot;</span><span class=\"p\">)</span>\n\n         <span class=\"p\">...</span>\n\n         <span class=\"c1\">-- Change the data in the texture to a nice orange.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n         <span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture_data</span><span class=\"p\">(</span><span class=\"s2\">&quot;dynamic_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n             <span class=\"c1\">-- Go on and to more stuff</span>\n             <span class=\"p\">...</span>\n         <span class=\"kr\">end</span>\n     <span class=\"kr\">else</span>\n         <span class=\"c1\">-- Something went wrong</span>\n         <span class=\"p\">...</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_font",
      "brief": "gets the node font",
      "description": "This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.",
      "returnvalues": [
        {
          "name": "font",
          "doc": "font id",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the font",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_font_resource",
      "brief": "gets the node font resource",
      "description": "This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "path hash to resource",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "font_name",
          "doc": "font of which to get the path hash",
          "types": [
            "hash",
            "string"
          ]
        }
      ],
      "examples": "Get the text metrics for a text\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">font_name</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_font</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_font_resource</span><span class=\"p\">(</span><span class=\"n\">font_name</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_text_metrics</span><span class=\"p\">(</span><span class=\"n\">font</span><span class=\"p\">,</span> <span class=\"s2\">&quot;The quick brown fox</span><span class=\"se\">\\n</span><span class=\"s2\"> jumps over the lazy dog&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_font",
      "brief": "sets the node font",
      "description": "This is only useful for text nodes.\nThe font must be mapped to the gui scene in the gui editor.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set the font",
          "types": [
            "node"
          ]
        },
        {
          "name": "font",
          "doc": "font id",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_layer",
      "brief": "gets the node layer",
      "description": "The layer must be mapped to the gui scene in the gui editor.",
      "returnvalues": [
        {
          "name": "layer",
          "doc": "layer id",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the layer",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_layer",
      "brief": "sets the node layer",
      "description": "The layer must be mapped to the gui scene in the gui editor.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set the layer",
          "types": [
            "node"
          ]
        },
        {
          "name": "layer",
          "doc": "layer id",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_layout",
      "brief": "gets the scene current layout",
      "description": "gets the scene current layout",
      "returnvalues": [
        {
          "name": "layout",
          "doc": "layout id",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_clipping_mode",
      "brief": "gets the node clipping mode",
      "description": "Clipping mode defines how the node will clip it's children nodes",
      "returnvalues": [
        {
          "name": "clipping_mode",
          "doc": "clipping mode\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the clipping mode",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_clipping_mode",
      "brief": "sets node clipping mode state",
      "description": "Clipping mode defines how the node will clip it's children nodes",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set clipping mode for",
          "types": [
            "node"
          ]
        },
        {
          "name": "clipping_mode",
          "doc": "clipping mode to set\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_clipping_visible",
      "brief": "gets node clipping visibility state",
      "description": "If node is set as visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.",
      "returnvalues": [
        {
          "name": "visible",
          "doc": "true or false",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the clipping visibility state",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_clipping_visible",
      "brief": "sets node clipping visibility",
      "description": "If node is set as an visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set clipping visibility for",
          "types": [
            "node"
          ]
        },
        {
          "name": "visible",
          "doc": "true or false",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_clipping_inverted",
      "brief": "gets node clipping inverted state",
      "description": "If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.",
      "returnvalues": [
        {
          "name": "inverted",
          "doc": "true or false",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the clipping inverted state",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_clipping_inverted",
      "brief": "sets node clipping inversion",
      "description": "If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set clipping inverted state for",
          "types": [
            "node"
          ]
        },
        {
          "name": "inverted",
          "doc": "true or false",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_xanchor",
      "brief": "gets the x-anchor of a node",
      "description": "The x-anchor specifies how the node is moved when the game is run in a different resolution.",
      "returnvalues": [
        {
          "name": "anchor",
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_LEFT</code></li>\n<li><code>gui.ANCHOR_RIGHT</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get x-anchor from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_xanchor",
      "brief": "sets the x-anchor of a node",
      "description": "The x-anchor specifies how the node is moved when the game is run in a different resolution.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set x-anchor for",
          "types": [
            "node"
          ]
        },
        {
          "name": "anchor",
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_LEFT</code></li>\n<li><code>gui.ANCHOR_RIGHT</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_yanchor",
      "brief": "gets the y-anchor of a node",
      "description": "The y-anchor specifies how the node is moved when the game is run in a different resolution.",
      "returnvalues": [
        {
          "name": "anchor",
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_TOP</code></li>\n<li><code>gui.ANCHOR_BOTTOM</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get y-anchor from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_yanchor",
      "brief": "sets the y-anchor of a node",
      "description": "The y-anchor specifies how the node is moved when the game is run in a different resolution.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set y-anchor for",
          "types": [
            "node"
          ]
        },
        {
          "name": "anchor",
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_TOP</code></li>\n<li><code>gui.ANCHOR_BOTTOM</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_pivot",
      "brief": "gets the pivot of a node",
      "description": "The pivot specifies how the node is drawn and rotated from its position.",
      "returnvalues": [
        {
          "name": "pivot",
          "doc": "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n  <li><code>gui.PIVOT_NW</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get pivot from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_pivot",
      "brief": "sets the pivot of a node",
      "description": "The pivot specifies how the node is drawn and rotated from its position.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set pivot for",
          "types": [
            "node"
          ]
        },
        {
          "name": "pivot",
          "doc": "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n  <li><code>gui.PIVOT_NW</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_width",
      "brief": "gets the scene width",
      "description": "Returns the scene width.",
      "returnvalues": [
        {
          "name": "width",
          "doc": "scene width",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_height",
      "brief": "gets the scene height",
      "description": "Returns the scene height.",
      "returnvalues": [
        {
          "name": "height",
          "doc": "scene height",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_slice9",
      "brief": "set the slice9 configuration for the node",
      "description": "Set the slice9 configuration values for the node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to manipulate",
          "types": [
            "node"
          ]
        },
        {
          "name": "values",
          "doc": "new values",
          "types": [
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_slice9",
      "brief": "get the slice9 values for the node",
      "description": "Returns the slice9 configuration values for the node.",
      "returnvalues": [
        {
          "name": "values",
          "doc": "configuration values",
          "types": [
            "vector4"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to manipulate",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_perimeter_vertices",
      "brief": "sets the number of generated vertices around the perimeter",
      "description": "Sets the number of generated vertices around the perimeter of a pie node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "pie node",
          "types": [
            "node"
          ]
        },
        {
          "name": "vertices",
          "doc": "vertex count",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_perimeter_vertices",
      "brief": "gets the number of generated vertices around the perimeter",
      "description": "Returns the number of generated vertices around the perimeter\nof a pie node.",
      "returnvalues": [
        {
          "name": "vertices",
          "doc": "vertex count",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "pie node",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_fill_angle",
      "brief": "sets the angle for the filled pie sector",
      "description": "Set the sector angle of a pie node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the fill angle for",
          "types": [
            "node"
          ]
        },
        {
          "name": "angle",
          "doc": "sector angle",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_fill_angle",
      "brief": "gets the angle for the filled pie sector",
      "description": "Returns the sector angle of a pie node.",
      "returnvalues": [
        {
          "name": "angle",
          "doc": "sector angle",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the fill angle",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_inner_radius",
      "brief": "sets the pie inner radius",
      "description": "Sets the inner radius of a pie node.\nThe radius is defined along the x-axis.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the inner radius for",
          "types": [
            "node"
          ]
        },
        {
          "name": "radius",
          "doc": "inner radius",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_inner_radius",
      "brief": "gets the pie inner radius",
      "description": "Returns the inner radius of a pie node.\nThe radius is defined along the x-axis.",
      "returnvalues": [
        {
          "name": "radius",
          "doc": "inner radius",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from where to get the inner radius",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_outer_bounds",
      "brief": "sets the pie node outer bounds mode",
      "description": "Sets the outer bounds mode for a pie node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set the outer bounds mode",
          "types": [
            "node"
          ]
        },
        {
          "name": "bounds_mode",
          "doc": "the outer bounds mode of the pie node:\n<ul>\n<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>\n<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_outer_bounds",
      "brief": "gets the pie outer bounds mode",
      "description": "Returns the outer bounds mode for a pie node.",
      "returnvalues": [
        {
          "name": "bounds_mode",
          "doc": "the outer bounds mode of the pie node:\n<ul>\n<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>\n<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from where to get the outer bounds mode",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_leading",
      "brief": "sets the leading of the text node",
      "description": "Sets the leading value for a text node. This value is used to\nscale the line spacing of text.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set the leading",
          "types": [
            "node"
          ]
        },
        {
          "name": "leading",
          "doc": "a scaling value for the line spacing (default=1)",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_leading",
      "brief": "gets the leading of the text node",
      "description": "Returns the leading value for a text node.",
      "returnvalues": [
        {
          "name": "leading",
          "doc": "leading scaling value (default=1)",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from where to get the leading",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_tracking",
      "brief": "sets the tracking of the text node",
      "description": "Sets the tracking value of a text node. This value is used to\nadjust the vertical spacing of characters in the text.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set the tracking",
          "types": [
            "node"
          ]
        },
        {
          "name": "tracking",
          "doc": "a scaling number for the letter spacing (default=0)",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_tracking",
      "brief": "gets the tracking of the text node",
      "description": "Returns the tracking value of a text node.",
      "returnvalues": [
        {
          "name": "tracking",
          "doc": "tracking scaling number (default=0)",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from where to get the tracking",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.pick_node",
      "brief": "determines if the node is pickable by the supplied coordinates",
      "description": "Tests whether a coordinate is within the bounding box of a\nnode.",
      "returnvalues": [
        {
          "name": "pickable",
          "doc": "pick result",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to be tested for picking",
          "types": [
            "node"
          ]
        },
        {
          "name": "x",
          "doc": "x-coordinate (see <a href=\"#on_input\">on_input</a> )",
          "types": [
            "number"
          ]
        },
        {
          "name": "y",
          "doc": "y-coordinate (see <a href=\"#on_input\">on_input</a> )",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.is_enabled",
      "brief": "returns if a node is enabled or not",
      "description": "Returns <code>true</code> if a node is enabled and <code>false</code> if it's not.\nDisabled nodes are not rendered and animations acting on them are not evaluated.",
      "returnvalues": [
        {
          "name": "enabled",
          "doc": "whether the node is enabled or not",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to query",
          "types": [
            "node"
          ]
        },
        {
          "name": "recursive",
          "doc": "check hierarchy recursively",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_enabled",
      "brief": "enables/disables a node",
      "description": "Sets a node to the disabled or enabled state.\nDisabled nodes are not rendered and animations acting on them are not evaluated.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to be enabled/disabled",
          "types": [
            "node"
          ]
        },
        {
          "name": "enabled",
          "doc": "whether the node should be enabled or not",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_visible",
      "brief": "returns if a node is visible or not",
      "description": "Returns <code>true</code> if a node is visible and <code>false</code> if it's not.\nInvisible nodes are not rendered.",
      "returnvalues": [
        {
          "name": "visible",
          "doc": "whether the node is visible or not",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to query",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_visible",
      "brief": "set visibility for a node",
      "description": "Set if a node should be visible or not. Only visible nodes are rendered.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to be visible or not",
          "types": [
            "node"
          ]
        },
        {
          "name": "visible",
          "doc": "whether the node should be visible or not",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_adjust_mode",
      "brief": "gets the node adjust mode",
      "description": "Returns the adjust mode of a node.\nThe adjust mode defines how the node will adjust itself to screen\nresolutions that differs from the one in the project settings.",
      "returnvalues": [
        {
          "name": "adjust_mode",
          "doc": "the current adjust mode\n<ul>\n<li><code>gui.ADJUST_FIT</code></li>\n<li><code>gui.ADJUST_ZOOM</code></li>\n<li><code>gui.ADJUST_STRETCH</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the adjust mode (node)",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_adjust_mode",
      "brief": "sets node adjust mode",
      "description": "Sets the adjust mode on a node.\nThe adjust mode defines how the node will adjust itself to screen\nresolutions that differs from the one in the project settings.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set adjust mode for",
          "types": [
            "node"
          ]
        },
        {
          "name": "adjust_mode",
          "doc": "adjust mode to set\n<ul>\n<li><code>gui.ADJUST_FIT</code></li>\n<li><code>gui.ADJUST_ZOOM</code></li>\n<li><code>gui.ADJUST_STRETCH</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_size_mode",
      "brief": "gets the node size mode",
      "description": "Returns the size of a node.\nThe size mode defines how the node will adjust itself in size. Automatic\nsize mode alters the node size based on the node's content. Automatic size\nmode works for Box nodes and Pie nodes which will both adjust their size\nto match the assigned image. Particle fx and Text nodes will ignore\nany size mode setting.",
      "returnvalues": [
        {
          "name": "size_mode",
          "doc": "the current size mode\n<ul>\n<li><code>gui.SIZE_MODE_MANUAL</code></li>\n<li><code>gui.SIZE_MODE_AUTO</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the size mode (node)",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_size_mode",
      "brief": "sets node size mode",
      "description": "Sets the size mode of a node.\nThe size mode defines how the node will adjust itself in size. Automatic\nsize mode alters the node size based on the node's content. Automatic size\nmode works for Box nodes and Pie nodes which will both adjust their size\nto match the assigned image. Particle fx and Text nodes will ignore\nany size mode setting.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set size mode for",
          "types": [
            "node"
          ]
        },
        {
          "name": "size_mode",
          "doc": "size mode to set\n<ul>\n<li><code>gui.SIZE_MODE_MANUAL</code></li>\n<li><code>gui.SIZE_MODE_AUTO</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.move_above",
      "brief": "moves the first node above the second",
      "description": "Alters the ordering of the two supplied nodes by moving the first node\nabove the second.\nIf the second argument is <code>nil</code> the first node is moved to the top.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "to move",
          "types": [
            "node"
          ]
        },
        {
          "name": "node",
          "doc": "reference node above which the first node should be moved",
          "types": [
            "node",
            "nil"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.move_below",
      "brief": "moves the first node below the second",
      "description": "Alters the ordering of the two supplied nodes by moving the first node\nbelow the second.\nIf the second argument is <code>nil</code> the first node is moved to the bottom.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "to move",
          "types": [
            "node"
          ]
        },
        {
          "name": "node",
          "doc": "reference node below which the first node should be moved",
          "types": [
            "node",
            "nil"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_parent",
      "brief": "gets the parent of the specified node",
      "description": "Returns the parent node of the specified node.\nIf the supplied node does not have a parent, <code>nil</code> is returned.",
      "returnvalues": [
        {
          "name": "parent",
          "doc": "parent instance or nil",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "the node from which to retrieve its parent",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_parent",
      "brief": "sets the parent of the node",
      "description": "Sets the parent node of the specified node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set its parent",
          "types": [
            "node"
          ]
        },
        {
          "name": "parent",
          "doc": "parent node to set",
          "types": [
            "node"
          ]
        },
        {
          "name": "keep_scene_transform",
          "doc": "optional flag to make the scene position being perserved",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.clone",
      "brief": "clone a node",
      "description": "Make a clone instance of a node.\nThis function does not clone the supplied node's children nodes.\nUse gui.clone_tree for that purpose.",
      "returnvalues": [
        {
          "name": "clone",
          "doc": "the cloned node",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to clone",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.clone_tree",
      "brief": "clone a node including its children",
      "description": "Make a clone instance of a node and all its children.\nUse gui.clone to clone a node excluding its children.",
      "returnvalues": [
        {
          "name": "clones",
          "doc": "a table mapping node ids to the corresponding cloned nodes",
          "types": [
            "table"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "root node to clone",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_tree",
      "brief": "get a node including its children",
      "description": "Get a node and all its children as a Lua table.",
      "returnvalues": [
        {
          "name": "clones",
          "doc": "a table mapping node ids to the corresponding nodes",
          "types": [
            "table"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "root node to get node tree from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.reset_nodes",
      "brief": "resets all nodes to initial state",
      "description": "Resets all nodes in the current GUI scene to their initial state.\nThe reset only applies to static node loaded from the scene.\nNodes that are created dynamically from script are not affected.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_render_order",
      "brief": "sets the render ordering for the current GUI scene",
      "description": "Set the order number for the current GUI scene.\nThe number dictates the sorting of the \"gui\" render predicate,\nin other words in which order the scene will be rendered in relation\nto other currently rendered GUI scenes.\nThe number must be in the range 0 to 15.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "order",
          "doc": "rendering order (0-15)",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.KEYBOARD_TYPE_DEFAULT",
      "brief": "default keyboard",
      "description": "default keyboard",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.KEYBOARD_TYPE_NUMBER_PAD",
      "brief": "number input keyboard",
      "description": "number input keyboard",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.KEYBOARD_TYPE_EMAIL",
      "brief": "email keyboard",
      "description": "email keyboard",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.KEYBOARD_TYPE_PASSWORD",
      "brief": "password keyboard",
      "description": "password keyboard",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.show_keyboard",
      "brief": "shows the on-display keyboard if available <span class=\"icon-ios\"></span> <span class=\"icon-android\"></span>",
      "description": "Shows the on-display touch keyboard.\nThe specified type of keyboard is displayed if it is available on\nthe device.\nThis function is only available on iOS and Android. <span class=\"icon-ios\"></span> <span class=\"icon-android\"></span>.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "type",
          "doc": "keyboard type\n<ul>\n<li><code>gui.KEYBOARD_TYPE_DEFAULT</code></li>\n<li><code>gui.KEYBOARD_TYPE_EMAIL</code></li>\n<li><code>gui.KEYBOARD_TYPE_NUMBER_PAD</code></li>\n<li><code>gui.KEYBOARD_TYPE_PASSWORD</code></li>\n</ul>",
          "types": [
            "constant"
          ]
        },
        {
          "name": "autoclose",
          "doc": "if the keyboard should automatically close when clicking outside",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.hide_keyboard",
      "brief": "hides on-display keyboard if available",
      "description": "Hides the on-display touch keyboard on the device.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.reset_keyboard",
      "brief": "resets on-display keyboard if available",
      "description": "Resets the input context of keyboard. This will clear marked text.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_position",
      "brief": "gets the node position",
      "description": "Returns the position of the supplied node.",
      "returnvalues": [
        {
          "name": "position",
          "doc": "node position",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the position from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_position",
      "brief": "sets the node position",
      "description": "Sets the position of the supplied node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the position for",
          "types": [
            "node"
          ]
        },
        {
          "name": "position",
          "doc": "new position",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_rotation",
      "brief": "gets the node rotation",
      "description": "Returns the rotation of the supplied node.\nThe rotation is expressed in degree Euler angles.",
      "returnvalues": [
        {
          "name": "rotation",
          "doc": "node rotation",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the rotation from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_rotation",
      "brief": "sets the node rotation",
      "description": "Sets the rotation of the supplied node.\nThe rotation is expressed in degree Euler angles.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the rotation for",
          "types": [
            "node"
          ]
        },
        {
          "name": "rotation",
          "doc": "new rotation",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_scale",
      "brief": "gets the node scale",
      "description": "Returns the scale of the supplied node.",
      "returnvalues": [
        {
          "name": "scale",
          "doc": "node scale",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the scale from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_scale",
      "brief": "sets the node scale",
      "description": "Sets the scaling of the supplied node.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the scale for",
          "types": [
            "node"
          ]
        },
        {
          "name": "scale",
          "doc": "new scale",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_color",
      "brief": "gets the node color",
      "description": "Returns the color of the supplied node. The components\nof the returned vector4 contains the color channel values:\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Color value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>Red value</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Green value</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Blue value</td>\n</tr>\n<tr>\n<td>w</td>\n<td>Alpha value</td>\n</tr>\n</tbody>\n</table>",
      "returnvalues": [
        {
          "name": "color",
          "doc": "node color",
          "types": [
            "vector4"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the color from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_color",
      "brief": "sets the node color",
      "description": "Sets the color of the supplied node. The components\nof the supplied vector3 or vector4 should contain the color channel values:\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Color value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>Red value</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Green value</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Blue value</td>\n</tr>\n<tr>\n<td>w <span class=\"type\">vector4</span></td>\n<td>Alpha value</td>\n</tr>\n</tbody>\n</table>",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the color for",
          "types": [
            "node"
          ]
        },
        {
          "name": "color",
          "doc": "new color",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_outline",
      "brief": "gets the node outline color",
      "description": "Returns the outline color of the supplied node.\nSee <a href=\"/ref/gui#gui.get_color\">gui.get_color</a> for info how vectors encode color values.",
      "returnvalues": [
        {
          "name": "color",
          "doc": "outline color",
          "types": [
            "vector4"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the outline color from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_outline",
      "brief": "sets the node outline color",
      "description": "Sets the outline color of the supplied node.\nSee <a href=\"/ref/gui#gui.set_color\">gui.set_color</a> for info how vectors encode color values.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the outline color for",
          "types": [
            "node"
          ]
        },
        {
          "name": "color",
          "doc": "new outline color",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_shadow",
      "brief": "gets the node shadow color",
      "description": "Returns the shadow color of the supplied node.\nSee <a href=\"/ref/gui#gui.get_color\">gui.get_color</a> for info how vectors encode color values.",
      "returnvalues": [
        {
          "name": "color",
          "doc": "node shadow color",
          "types": [
            "vector4"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the shadow color from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_shadow",
      "brief": "sets the node shadow color",
      "description": "Sets the shadow color of the supplied node.\nSee <a href=\"/ref/gui#gui.set_color\">gui.set_color</a> for info how vectors encode color values.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the shadow color for",
          "types": [
            "node"
          ]
        },
        {
          "name": "color",
          "doc": "new shadow color",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_size",
      "brief": "sets the node size",
      "description": "Sets the size of the supplied node.\n<span class=\"icon-attention\"></span> You can only set size on nodes with size mode set to SIZE_MODE_MANUAL",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the size for",
          "types": [
            "node"
          ]
        },
        {
          "name": "size",
          "doc": "new size",
          "types": [
            "vector3",
            "vector4"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_size",
      "brief": "gets the node size",
      "description": "Returns the size of the supplied node.",
      "returnvalues": [
        {
          "name": "size",
          "doc": "node size",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the size from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_screen_position",
      "brief": "gets the node screen position",
      "description": "Returns the screen position of the supplied node. This function returns the\ncalculated transformed position of the node, taking into account any parent node\ntransforms.",
      "returnvalues": [
        {
          "name": "position",
          "doc": "node screen position",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the screen position from",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_screen_position",
      "brief": "sets screen position to the node",
      "description": "Set the screen position to the supplied node",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the screen position to",
          "types": [
            "node"
          ]
        },
        {
          "name": "screen_position",
          "doc": "screen position",
          "types": [
            "vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.screen_to_local",
      "brief": "convert screen position to the local node position",
      "description": "Convert the screen position to the local position of supplied node",
      "returnvalues": [
        {
          "name": "local_position",
          "doc": "local position",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node used for getting local transformation matrix",
          "types": [
            "node"
          ]
        },
        {
          "name": "screen_position",
          "doc": "screen position",
          "types": [
            "vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_flipbook_cursor",
      "brief": "gets the normalized cursor of the animation on a node with flipbook animation",
      "description": "This is only useful nodes with flipbook animations. Gets the normalized cursor of the flipbook animation on a node.",
      "returnvalues": [
        {
          "name": "cursor",
          "doc": "value <span class=\"type\">number</span> cursor value",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get the cursor for (node)",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_flipbook_cursor",
      "brief": "sets the normalized cursor of the animation on a node with flipbook animation",
      "description": "This is only useful nodes with flipbook animations. The cursor is normalized.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the cursor for",
          "types": [
            "node"
          ]
        },
        {
          "name": "cursor",
          "doc": "cursor value",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_flipbook_playback_rate",
      "brief": "gets the playback rate of the flipbook animation on a node",
      "description": "This is only useful nodes with flipbook animations. Gets the playback rate of the flipbook animation on a node.",
      "returnvalues": [
        {
          "name": "rate",
          "doc": "playback rate",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the cursor for",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_flipbook_playback_rate",
      "brief": "sets the playback rate of the flipbook animation on a node",
      "description": "This is only useful nodes with flipbook animations. Sets the playback rate of the flipbook animation on a node. Must be positive.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set the cursor for",
          "types": [
            "node"
          ]
        },
        {
          "name": "playback_rate",
          "doc": "playback rate",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.new_particlefx_node",
      "brief": "creates a new particle fx node",
      "description": "Dynamically create a particle fx node.",
      "returnvalues": [
        {
          "name": "node",
          "doc": "new particle fx node",
          "types": [
            "node"
          ]
        }
      ],
      "parameters": [
        {
          "name": "pos",
          "doc": "node position",
          "types": [
            "vector3",
            "vector4"
          ]
        },
        {
          "name": "particlefx",
          "doc": "particle fx resource name",
          "types": [
            "hash",
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.play_particlefx",
      "brief": "Plays a particle fx",
      "description": "Plays the paricle fx for a gui node",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to play particle fx for",
          "types": [
            "node"
          ]
        },
        {
          "name": "[emitter_state_function]",
          "doc": "optional callback function that will be called when an emitter attached to this particlefx changes state.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object</dd>\n<dt><code>node</code></dt>\n<dd><span class=\"type\">hash</span> The particle fx node, or <code>nil</code> if the node was deleted</dd>\n<dt><code>emitter</code></dt>\n<dd><span class=\"type\">hash</span> The id of the emitter</dd>\n<dt><code>state</code></dt>\n<dd><span class=\"type\">constant</span> the new state of the emitter:</dd>\n</dl>\n<ul>\n<li><code>particlefx.EMITTER_STATE_SLEEPING</code></li>\n<li><code>particlefx.EMITTER_STATE_PRESPAWN</code></li>\n<li><code>particlefx.EMITTER_STATE_SPAWNING</code></li>\n<li><code>particlefx.EMITTER_STATE_POSTSPAWN</code></li>\n</ul>",
          "types": [
            "function(self, node, emitter, state)"
          ]
        }
      ],
      "examples": "How to play a particle fx when a gui node is created.\nThe callback receives the gui node, the hash of the id\nof the emitter, and the new state of the emitter as particlefx.EMITTER_STATE_<STATE>.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">emitter_state_change</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">emitter</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">emitter</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;exhaust&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">EMITTER_STATE_POSTSPAWN</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- exhaust is done spawning particles...</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_particlefx</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;particlefx&quot;</span><span class=\"p\">),</span> <span class=\"n\">emitter_state_change</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.stop_particlefx",
      "brief": "Stops a particle fx",
      "description": "Stops the particle fx for a gui node",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to stop particle fx for",
          "types": [
            "node"
          ]
        },
        {
          "name": "options",
          "doc": "options when stopping the particle fx. Supported options:\n<ul>\n<li><span class=\"type\">boolean</span> <code>clear</code>: instantly clear spawned particles</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_particlefx",
      "brief": "Sets a particle fx",
      "description": "Set the paricle fx for a gui node",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node to set particle fx for",
          "types": [
            "node"
          ]
        },
        {
          "name": "particlefx",
          "doc": "particle fx id",
          "types": [
            "hash",
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_particlefx",
      "brief": "Gets a particle fx",
      "description": "Get the paricle fx for a gui node",
      "returnvalues": [
        {
          "name": "",
          "doc": "particle fx id",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "node",
          "doc": "node to get particle fx for",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_inherit_alpha",
      "brief": "gets the node inherit alpha state",
      "description": "gets the node inherit alpha state",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get the inherit alpha state",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_inherit_alpha",
      "brief": "sets the node inherit alpha state",
      "description": "sets the node inherit alpha state",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to set the inherit alpha state",
          "types": [
            "node"
          ]
        },
        {
          "name": "inherit_alpha",
          "doc": "true or false",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.get_alpha",
      "brief": "gets the node alpha",
      "description": "gets the node alpha",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node from which to get alpha",
          "types": [
            "node"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "gui.set_alpha",
      "brief": "sets the node alpha",
      "description": "sets the node alpha",
      "returnvalues": [],
      "parameters": [
        {
          "name": "node",
          "doc": "node for which to set alpha",
          "types": [
            "node"
          ]
        },
        {
          "name": "alpha",
          "doc": "0..1 alpha color",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_POSITION",
      "brief": "position property",
      "description": "position property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_ROTATION",
      "brief": "rotation property",
      "description": "rotation property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_SCALE",
      "brief": "scale property",
      "description": "scale property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_COLOR",
      "brief": "color property",
      "description": "color property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_OUTLINE",
      "brief": "outline color property",
      "description": "outline color property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_SHADOW",
      "brief": "shadow color property",
      "description": "shadow color property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_SIZE",
      "brief": "size property",
      "description": "size property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_FILL_ANGLE",
      "brief": "fill_angle property",
      "description": "fill_angle property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_INNER_RADIUS",
      "brief": "inner_radius property",
      "description": "inner_radius property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PROP_SLICE9",
      "brief": "slice9 property",
      "description": "slice9 property",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.BLEND_ALPHA",
      "brief": "alpha blending",
      "description": "alpha blending",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.BLEND_ADD",
      "brief": "additive blending",
      "description": "additive blending",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.BLEND_ADD_ALPHA",
      "brief": "additive alpha blending",
      "description": "additive alpha blending",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.BLEND_MULT",
      "brief": "multiply blending",
      "description": "multiply blending",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.CLIPPING_MODE_NONE",
      "brief": "clipping mode none",
      "description": "clipping mode none",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.CLIPPING_MODE_STENCIL",
      "brief": "clipping mode stencil",
      "description": "clipping mode stencil",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ANCHOR_LEFT",
      "brief": "left x-anchor",
      "description": "left x-anchor",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ANCHOR_RIGHT",
      "brief": "right x-anchor",
      "description": "right x-anchor",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ANCHOR_TOP",
      "brief": "top y-anchor",
      "description": "top y-anchor",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ANCHOR_BOTTOM",
      "brief": "bottom y-anchor",
      "description": "bottom y-anchor",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ANCHOR_NONE",
      "brief": "no anchor",
      "description": "no anchor",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_CENTER",
      "brief": "center pivot",
      "description": "center pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_N",
      "brief": "north pivot",
      "description": "north pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_NE",
      "brief": "north-east pivot",
      "description": "north-east pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_E",
      "brief": "east pivot",
      "description": "east pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_SE",
      "brief": "south-east pivot",
      "description": "south-east pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_S",
      "brief": "south pivot",
      "description": "south pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_SW",
      "brief": "south-west pivot",
      "description": "south-west pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_W",
      "brief": "west pivot",
      "description": "west pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIVOT_NW",
      "brief": "north-west pivot",
      "description": "north-west pivot",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ADJUST_FIT",
      "brief": "fit adjust mode",
      "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe fit mode ensures that the entire node is visible in the adjusted gui scene.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ADJUST_ZOOM",
      "brief": "zoom adjust mode",
      "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe zoom mode ensures that the node fills its entire area and might make the node exceed it.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.ADJUST_STRETCH",
      "brief": "stretch adjust mode",
      "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe stretch mode ensures that the node is displayed as is in the adjusted gui scene, which might scale it non-uniformally.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIEBOUNDS_ELLIPSE",
      "brief": "elliptical pie node bounds",
      "description": "elliptical pie node bounds",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.PIEBOUNDS_RECTANGLE",
      "brief": "rectangular pie node bounds",
      "description": "rectangular pie node bounds",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.SIZE_MODE_MANUAL",
      "brief": "manual size mode",
      "description": "The size of the node is determined by the size set in the editor, the constructor or by gui.set_size()",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.SIZE_MODE_AUTO",
      "brief": "automatic size mode",
      "description": "The size of the node is determined by the currently assigned texture.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.RESULT_TEXTURE_ALREADY_EXISTS",
      "brief": "texture already exists",
      "description": "The texture id already exists when trying to use gui.new_texture().",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.RESULT_OUT_OF_RESOURCES",
      "brief": "out of resource",
      "description": "The system is out of resources, for instance when trying to create a new\ntexture using gui.new_texture().",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "gui.RESULT_DATA_ERROR",
      "brief": "data error",
      "description": "The provided data is not in the expected format or is in some other way\nincorrect, for instance the image data provided to gui.new_texture().",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "init",
      "brief": "called when a gui component is initialized",
      "description": "This is a callback-function, which is called by the engine when a gui component is initialized. It can be used\nto set the initial state of the script and gui scene.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "self",
          "doc": "reference to the script state to be used for storing data",
          "types": [
            "object"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- set up useful data</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "final",
      "brief": "called when a gui component is finalized",
      "description": "This is a callback-function, which is called by the engine when a gui component is finalized (destroyed). It can\nbe used to e.g. take some last action, report the finalization to other game object instances\nor release user input focus (see <code>release_input_focus</code>). There is no use in starting any animations or similar\nfrom this function since the gui component is about to be destroyed.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "self",
          "doc": "reference to the script state to be used for storing data",
          "types": [
            "object"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">final</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- report finalization</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_friend_instance&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;im_dead&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">my_stats</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">some_value</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "update",
      "brief": "called every frame to update the gui component",
      "description": "This is a callback-function, which is called by the engine every frame to update the state of a gui component.\nIt can be used to perform any kind of gui related tasks, e.g. animating nodes.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "self",
          "doc": "reference to the script state to be used for storing data",
          "types": [
            "object"
          ]
        },
        {
          "name": "dt",
          "doc": "the time-step of the frame update",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "This example demonstrates how to update a text node that displays game score in a counting fashion.\nIt is assumed that the gui component receives messages from the game when a new score is to be shown.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fetch the score text node for later use (assumes it is called &quot;score&quot;)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;score&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- keep track of the current score counted up so far</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">-- keep track of the target score we should count up to</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">-- how fast we will update the score, in score/second</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_update_speed</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check if target score is more than current score</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">&lt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span>\n        <span class=\"c1\">-- increment current score according to the speed</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">+</span> <span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_update_speed</span>\n        <span class=\"c1\">-- check if we went past the target score, clamp current score in that case</span>\n        <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">&gt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"kr\">then</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span>\n        <span class=\"kr\">end</span>\n        <span class=\"c1\">-- update the score text node</span>\n        <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">..</span> <span class=\"nb\">math.floor</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span><span class=\"p\">))</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check the message</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;set_score&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">score</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "on_message",
      "brief": "called when a message has been sent to the gui component",
      "description": "This is a callback-function, which is called by the engine whenever a message has been sent to the gui component.\nIt can be used to take action on the message, e.g. update the gui or send a response back to the sender of the message.\nThe <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the\ndocumentation of the message specifies which data is supplied.\nSee the <a href=\"#update\">update</a> function for examples on how to use this callback-function.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "self",
          "doc": "reference to the script state to be used for storing data",
          "types": [
            "object"
          ]
        },
        {
          "name": "message_id",
          "doc": "id of the received message",
          "types": [
            "hash"
          ]
        },
        {
          "name": "message",
          "doc": "a table containing the message data",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "on_input",
      "brief": "called when user input is received",
      "description": "This is a callback-function, which is called by the engine when user input is sent to the instance of the gui component.\nIt can be used to take action on the input, e.g. modify the gui according to the input.\nFor an instance to obtain user input, it must first acquire input\nfocus through the message <code>acquire_input_focus</code>.\nAny instance that has obtained input will be put on top of an\ninput stack. Input is sent to all listeners on the stack until the\nend of stack is reached, or a listener returns <code>true</code>\nto signal that it wants input to be consumed.\nSee the documentation of <a href=\"/ref/go/#acquire_input_focus\">acquire_input_focus</a> for more\ninformation.\nThe <code>action</code> parameter is a table containing data about the input mapped to the\n<code>action_id</code>.\nFor mapped actions it specifies the value of the input and if it was just pressed or released.\nActions are mapped to input in an input_binding-file.\nMouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.\nThe <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.\nHere is a brief description of the available table fields:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>value</code></td>\n<td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>If the input was pressed this frame. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>If the input was released this frame. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>repeated</code></td>\n<td>If the input was repeated this frame. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_x</code></td>\n<td>The screen space x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_y</code></td>\n<td>The screen space y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_dx</code></td>\n<td>The change in screen space x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_dy</code></td>\n<td>The change in screen space y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>gamepad</code></td>\n<td>The index of the gamepad device that provided the input.</td>\n</tr>\n<tr>\n<td><code>touch</code></td>\n<td>List of touch input, one element per finger, if present. See table below about touch input</td>\n</tr>\n</tbody>\n</table>\nTouch input table:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>id</code></td>\n<td>A number identifying the touch input during its duration.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>True if the finger was pressed this frame.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>True if the finger was released this frame.</td>\n</tr>\n<tr>\n<td><code>tap_count</code></td>\n<td>Number of taps, one for single, two for double-tap, etc</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x touch location.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y touch location.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value.</td>\n</tr>\n<tr>\n<td><code>acc_x</code></td>\n<td>Accelerometer x value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_y</code></td>\n<td>Accelerometer y value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_z</code></td>\n<td>Accelerometer z value (if present).</td>\n</tr>\n</tbody>\n</table>",
      "returnvalues": [
        {
          "name": "[consume]",
          "doc": "optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "doc": "reference to the script state to be used for storing data",
          "types": [
            "object"
          ]
        },
        {
          "name": "action_id",
          "doc": "id of the received input action, as mapped in the input_binding-file",
          "types": [
            "hash"
          ]
        },
        {
          "name": "action",
          "doc": "a table containing the input data, see above for a description",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for input</span>\n    <span class=\"kr\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_action&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- take appropritate action</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">value</span>\n    <span class=\"kr\">end</span>\n    <span class=\"c1\">-- consume input</span>\n    <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "on_reload",
      "brief": "called when the gui script is reloaded",
      "description": "\nThis is a callback-function, which is called by the engine when the gui script is reloaded, e.g. from the editor.\nIt can be used for live development, e.g. to tweak constants or set up the state properly for the script.\n",
      "returnvalues": [],
      "parameters": [
        {
          "name": "self",
          "doc": "reference to the script state to be used for storing data",
          "types": [
            "object"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_reload</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- restore some color (or similar)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_original_color</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "layout_changed",
      "brief": "reports a layout change",
      "description": "This message is broadcast to every GUI component when a layout change has been initiated\non device.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "id",
          "doc": "the id of the layout the engine is changing to",
          "types": [
            "hash"
          ]
        },
        {
          "name": "previous_id",
          "doc": "the id of the layout the engine is changing from",
          "types": [
            "hash"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n   <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;layout_changed&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;Landscape&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n       <span class=\"c1\">-- switching layout to &quot;Landscape&quot;...</span>\n       <span class=\"p\">...</span>\n   <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "gui",
    "name": "GUI",
    "brief": "GUI API documentation",
    "description": "GUI API documentation",
    "path": "",
    "file": "",
    "notes": [],
    "group": "SYSTEM"
  }
}
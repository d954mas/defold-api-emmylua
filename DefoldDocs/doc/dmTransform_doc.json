{
  "elements": [
    {
      "type": "STRUCT",
      "name": "Transform",
      "brief": "Transform with non-uniform (3-component) scale",
      "description": "Transform with non-uniform (3-component) scale.\nTransform applied as:\nT(p) = translate(rotate(scale(p))) = p'\nThe scale is non-rotated to avoid shearing in the transform.\nTwo transforms are applied as:\nT1(T2(p)) = t1(r1(t2(r2(s1(s2(p)))))) = p'\nThis means that the transform is not associative:\nT1(T2(p)) != (T1*T2)(P)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Transform",
      "brief": "Constructor. Leaves the struct in an uninitialized...",
      "description": "Constructor. Leaves the struct in an uninitialized state",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Transform",
      "brief": "constructor",
      "description": "constructor",
      "returnvalues": [],
      "parameters": [
        {
          "name": "translation",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        },
        {
          "name": "rotation",
          "doc": "",
          "types": [
            "dmVMath::Quat"
          ]
        },
        {
          "name": "scale",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Transform",
      "brief": "constructor",
      "description": "constructor",
      "returnvalues": [],
      "parameters": [
        {
          "name": "translation",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        },
        {
          "name": "rotation",
          "doc": "",
          "types": [
            "dmVMath::Quat"
          ]
        },
        {
          "name": "scale",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetIdentity",
      "brief": "initialize to identity transform",
      "description": "initialize to identity transform",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetTranslation",
      "brief": "get translation",
      "description": "get translation",
      "returnvalues": [
        {
          "name": "translation",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetTranslation",
      "brief": "set translation",
      "description": "set translation",
      "returnvalues": [],
      "parameters": [
        {
          "name": "translation",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetScale",
      "brief": "get scale",
      "description": "get scale",
      "returnvalues": [
        {
          "name": "scale",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetScale",
      "brief": "set scale",
      "description": "set scale",
      "returnvalues": [
        {
          "name": "scale",
          "doc": "",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetUniformScale",
      "brief": "Compute a 'uniform' scale for this transform. In t...",
      "description": "Compute a 'uniform' scale for this transform. In the event that the\nscale applied to this transform is not uniform then the value is arbitrary:\nwe make a selection that will not introduce any floating point rounding errors.",
      "returnvalues": [
        {
          "name": "scale",
          "doc": "the uniform scale associated with this transform.",
          "types": [
            "float"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetUniformScale",
      "brief": "set uniform scale",
      "description": "set uniform scale",
      "returnvalues": [],
      "parameters": [
        {
          "name": "scale",
          "doc": "",
          "types": [
            "float"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "GetRotation",
      "brief": "get rotatiom",
      "description": "get rotatiom",
      "returnvalues": [
        {
          "name": "rotation",
          "doc": "",
          "types": [
            "dmVMath::Quat"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "SetRotation",
      "brief": "set rotatiom",
      "description": "set rotatiom",
      "returnvalues": [],
      "parameters": [
        {
          "name": "rotation",
          "doc": "",
          "types": [
            "dmVMath::Quat"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Apply",
      "brief": "Apply the transform on a point (includes the trans...",
      "description": "Apply the transform on a point (includes the transform translation).",
      "returnvalues": [
        {
          "name": "point",
          "doc": "Transformed point",
          "types": [
            "dmVMath::Point3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "t",
          "doc": "Transform",
          "types": [
            "dmTransform::Transform&"
          ]
        },
        {
          "name": "p",
          "doc": "Point",
          "types": [
            "dmVMath::Point3&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ApplyNoScaleZ",
      "brief": "Apply the transform on a point, but without scalin...",
      "description": "Apply the transform on a point, but without scaling the Z-component of the point (includes the transform translation).",
      "returnvalues": [
        {
          "name": "point",
          "doc": "Transformed point",
          "types": [
            "dmVMath::Point3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "t",
          "doc": "Transform",
          "types": [
            "dmTransform::Transform&"
          ]
        },
        {
          "name": "p",
          "doc": "Point",
          "types": [
            "dmVMath::Point3&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Apply",
      "brief": "Apply the transform on a vector (excludes the tran...",
      "description": "Apply the transform on a vector (excludes the transform translation).",
      "returnvalues": [
        {
          "name": "point",
          "doc": "Transformed vector",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "t",
          "doc": "Transform",
          "types": [
            "dmTransform::Transform&"
          ]
        },
        {
          "name": "v",
          "doc": "Vector",
          "types": [
            "dmVMath::Vector3&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ApplyNoScaleZ",
      "brief": "Apply the transform on a vector, but without scali...",
      "description": "Apply the transform on a vector, but without scaling the Z-component of the vector (excludes the transform translation).",
      "returnvalues": [
        {
          "name": "point",
          "doc": "Transformed vector",
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "t",
          "doc": "Transform",
          "types": [
            "dmTransform::Transform&"
          ]
        },
        {
          "name": "v",
          "doc": "Vector",
          "types": [
            "dmVMath::Vector3&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Mul",
      "brief": "Transforms the right-hand transform by the left-ha...",
      "description": "Transforms the right-hand transform by the left-hand transform",
      "returnvalues": [
        {
          "name": "result",
          "doc": "Transformed transform",
          "types": [
            "dmTransform::Transform"
          ]
        }
      ],
      "parameters": [
        {
          "name": "lhs",
          "doc": "",
          "types": [
            "const dmTransform::Transform&"
          ]
        },
        {
          "name": "rhs",
          "doc": "",
          "types": [
            "const dmTransform::Transform&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "MulNoScaleZ",
      "brief": "Transforms the right-hand transform by the left-ha...",
      "description": "Transforms the right-hand transform by the left-hand transform, without scaling the Z-component of the transition of the transformed transform",
      "returnvalues": [
        {
          "name": "result",
          "doc": "Transformed transform",
          "types": [
            "dmTransform::Transform"
          ]
        }
      ],
      "parameters": [
        {
          "name": "lhs",
          "doc": "",
          "types": [
            "const dmTransform::Transform&"
          ]
        },
        {
          "name": "rhs",
          "doc": "",
          "types": [
            "const dmTransform::Transform&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Inv",
      "brief": "Invert a transform",
      "description": "Invert a transform",
      "returnvalues": [
        {
          "name": "result",
          "doc": "inverted transform",
          "types": [
            "dmTransform::Transform"
          ]
        }
      ],
      "parameters": [
        {
          "name": "t",
          "doc": "",
          "types": [
            "const dmTransform::Transform&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ToMatrix",
      "brief": "Convert a transform into a 4-dim matrix",
      "description": "Convert a transform into a 4-dim matrix",
      "returnvalues": [
        {
          "name": "Matrix",
          "doc": "representing the same transform",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "t",
          "doc": "Transform to convert",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ExtractScale",
      "brief": "Extract the absolute values of the scale component...",
      "description": "Extract the absolute values of the scale component from a matrix.",
      "returnvalues": [
        {
          "name": "Vector3",
          "doc": "with scale values for x,y,z",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "mtx",
          "doc": "Source matrix",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ResetScale",
      "brief": "Eliminate the scaling components in a matrix",
      "description": "Eliminate the scaling components in a matrix",
      "returnvalues": [
        {
          "name": "Vector",
          "doc": "containing the scaling by component",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "mtx",
          "doc": "Matrix to operate on",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "ToTransform",
      "brief": "Convert a matrix into a transform",
      "description": "Convert a matrix into a transform",
      "returnvalues": [
        {
          "name": "Transform",
          "doc": "representing the same transform",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [
        {
          "name": "mtx",
          "doc": "Matrix4 to convert",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "NormalizeZScale",
      "brief": "Eliminate the z scaling components in a matrix",
      "description": "Eliminate the z scaling components in a matrix",
      "returnvalues": [],
      "parameters": [
        {
          "name": "mtx",
          "doc": "Matrix to operate on",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "NormalizeZScale",
      "brief": "Eliminate the z scaling components in a matrix",
      "description": "Eliminate the z scaling components in a matrix",
      "returnvalues": [],
      "parameters": [
        {
          "name": "source",
          "doc": "Source matrix",
          "types": [
            "const dmVMath::Matrix&"
          ]
        },
        {
          "name": "target",
          "doc": "Target matrix",
          "types": [
            "dmVMath::Matrix*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "MulNoScaleZ",
      "brief": "Multiply two matrices without z-scaling the transl...",
      "description": "Multiply two matrices without z-scaling the translation in m2",
      "returnvalues": [
        {
          "name": "result",
          "doc": "The resulting transform",
          "types": [
            "dmVMath::Matrix"
          ]
        }
      ],
      "parameters": [
        {
          "name": "m1",
          "doc": "First matrix",
          "types": [
            "const dmVMath::Matrix&"
          ]
        },
        {
          "name": "m2",
          "doc": "Second matrix",
          "types": [
            "const dmVMath::Matrix&"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmTransform",
    "name": "Transform",
    "brief": "Transform API documentation",
    "description": "<span class=\"file\"><dmsdk/dlib/transform.h></span>\nApi for transforms with rotation, scale and translation",
    "path": "",
    "file": "",
    "notes": []
  }
}